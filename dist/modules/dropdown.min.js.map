{"version":3,"sources":["modules/dropdown.js"],"names":["angular","trigger","provider","container","this","defaults","keyboard","html","delay","placement","$get","bodyEl","matchesSelector","DropdownFactory","$dropdown","options","inlineTemplate","$window","$rootScope","$tooltip","$timeout","evt","target","element","directive","getTarget","parent","extend","config","$onKeyDown","keyCode","stopPropagation","items","index","forEach","preventDefault","focus","length","show","el","i","on","hide","dropdownElement","$isShown","$element","off","destroy","onBodyClick","scope","document","body","Element","prototype","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","$sce","restrict","link","falseValueRegExp","attr","transclusion","bsDropdown","key","$watch","newValue","oldValue","test","bsShow","dropdown","isDefined","isString","match","$on"],"mappings":"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","file":"modules/dropdown.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function() {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      template: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory(element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var scope = $dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.inlineTemplate === true) {\n          options.inlineTemplate = '.dropdown-menu';\n        }\n        if (options.inlineTemplate && !options.target) {\n          options.target = element.parent();\n        }\n\n        $dropdown = $tooltip(element, options);\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function(evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if(!items.length) return;\n          var index;\n          angular.forEach(items, function(el, i) {\n            if(matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if(evt.keyCode === 38 && index > 0) index--;\n          else if(evt.keyCode === 40 && index < items.length - 1) index++;\n          else if(angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function() {\n          var target = getTarget();\n          (target.hasClass('dropdown') || target.hasClass('dropup')) && target.addClass('open');\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function() {\n            options.keyboard && $dropdown.$element && $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function() {\n          var dropdownElement = $dropdown.$element;\n          if(!$dropdown.$isShown) return;\n          hide();\n          if($dropdown.$isShown) return; // support preventing hide\n          dropdownElement && dropdownElement.off('mousedown', $dropdown.$onMouseDown);\n          bodyEl.off('click', onBodyClick);\n          var target = getTarget();\n          (target.hasClass('dropdown') || target.hasClass('dropup')) && target.removeClass('open');\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function() {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick(evt) {\n          if(evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        function getTarget() {\n          return options.target || element.parent();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink(scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['placement', 'container', 'delay', 'target', 'trigger', 'keyboard', 'html', 'animation', 'template', 'id', 'inlineTemplate'], function(key) {\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function(key) {\n          if(angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key]))\n            options[key] = false;\n        });\n\n        if (attr.bsDropdown) {\n          // Support scope as an object\n          scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n        } else {\n          // Support for inline templates\n          options.inlineTemplate = options.inlineTemplate || true;\n        }\n\n        // Visibility binding support\n        attr.bsShow && scope.$watch(attr.bsShow, function(newValue, oldValue) {\n          if(!dropdown || !angular.isDefined(newValue)) return;\n          if(angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n          newValue === true ? dropdown.show() : dropdown.hide();\n        });\n\n        // Initialize dropdown\n        var dropdown = $dropdown(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function() {\n          if (dropdown) dropdown.destroy();\n          options = null;\n          dropdown = null;\n        });\n\n      }\n    };\n\n  });\n"],"sourceRoot":"/source/"}