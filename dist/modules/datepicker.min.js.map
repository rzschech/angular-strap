{"version":3,"sources":["modules/datepicker.js"],"names":["angular","container","provider","keyboard","this","defaults","html","delay","useNative","dateType","dateFormat","timezone","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","autoclose","minDate","Infinity","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","$get","isTouch","DatepickerFactory","$datepicker","options","$options","pickerViews","views","el","selected","isNative","date","element","focus","viewDate","scope","$iconLeft","$iconRight","$hasToday","$picker","$select","select","$selectPane","value","$hasClear","$toggleMode","$views","$mode","setMode","Date","length","$setToday","$clear","update","isDate","$date","updateDisabledDates","disabledDateRanges","dateRanges","forEach","i","$build","controller","$dateValue","rows","$setDisabledEl","keep","$setViewValue","$render","copy","extend","year","getFullYear","month","getDate","mode","pristine","call","$updateSelected","built","$isSelected","disabled","isDisabled","steps","targetDate","getUTCFullYear","getUTCMonth","UTC","$onMouseDown","evt","preventDefault","stopPropagation","getUTCDate","targetEl","$onKeyDown","nodeName","test","keyCode","shiftKey","altKey","parentScope","$digest","hide","onKeyDown","prop","init","attr","focusElement","_init","_destroy","destroy","off","_show","show","$timeout","_hide","on","blur","datepickerElement","$isShown","$element","$scope","link","datepickerViews","require","directive","$window","navigator","userAgent","restrict","falseValueRegExp","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","isMaxValid","isValid","isMinValid","isNaN","parsedDate","getTime","$parsers","unshift","viewValue","$setValidity","getDateFormattedString","formatDate","key","isDefined","$eval","bsKey","lang","format","dateParser","$dateParser","strict","bsShow","isString","newValue","$watch","oldValue","match","validateAgainstMinMaxDate","$observe","disabledDates","timezoneOffsetAdjust","$formatters","modelValue","isUndefined","NaN","parse","split","size","arrays","mod","n","m","arr","splice","$dateFormatter","$sce","weekDaysMin","weekdaysShort","weekDaysLabelsHtml","startDate","picker","weekDaysLabels","slice","concat","getMonth","firstDayOfMonth","firstDayOfMonthOffset","getTimezoneOffset","firstDate","firstDateOffset","build","days","day","daylightSavingAdjust","push","isToday","toDateString","today","muted","label","title","showLabels","labels","isTodayDisabled","isSelected","time","indexOf","getDay","newDate","name","months","lastDate","actualMonth","parseInt","firstYear","years","actualYear","Array","prototype","setYear"],"mappings":"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","file":"modules/datepicker.min.js","sourcesContent":["'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          var datepickerElement = $datepicker.$element;\n          if (!$datepicker.$isShown) return;\n          _hide(blur);\n          if (!$datepicker.$isShown) return; // support preventing hide\n          datepickerElement.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n"],"sourceRoot":"/source/"}