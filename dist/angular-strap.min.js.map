{"version":3,"sources":["angular-strap.js","typeahead/typeahead.js","helpers/compiler.js","modal/modal.js","tooltip/tooltip.js","timepicker/timepicker.js","tab/tab.js","select/select.js","scrollspy/scrollspy.js","progressbar/progressbar.js","popover/popover.js","navbar/navbar.js","helpers/raf.js","helpers/parse-options.js","helpers/dimensions.js","helpers/debounce.js","helpers/date-parser.js","helpers/date-formatter.js","dropdown/dropdown.js","datepicker/datepicker.js","collapse/collapse.js","button/button.js","aside/aside.js","affix/affix.js","alert/alert.js","module.js"],"names":["prefixEvent","undefined","templateUrl","options","cache","$templateCache","then","element","res","fetchTemplate","template","fetchPromises","module","$http","get","defaults","animation","backdropAnimation","this","compile","controller","console","controllerAs","resolve","copy","locals","bindToController","angular","forEach","value","isString","$injector","key","invoke","transformTemplate","identity","extend","$template","when","$q","all","templateEl","Error","findElement","contentTemplate","templates","contentEl","removeAttr","html","replace","next","remove","outerHTML","link","scope","trim","contents","linkFn","invokeCtrl","children","instance","ctrl","isObject","arguments","data","apply","bsCompilerService","$inject","trigger","provider","container","keyboard","delay","minLength","filter","limit","autoSelect","comparator","trimValue","$get","$typeahead","parentScope","$resetMatches","$window","$rootScope","$tooltip","$$rAF","$timeout","$matches","config","$$postDigest","$scope","activate","$activeIndex","select","index","$select","evt","matches","$isVisible","safeDigest","update","$render","$emit","isDefined","onSelect","$setViewValue","length","isFunction","equals","$onMouseDown","preventDefault","stopPropagation","keyCode","$digest","show","$element","hide","typeaheadElement","$isShown","off","$onKeyDown","$$phase","array","TypeaheadFactory","$filter","expression","directive","results","postLink","attr","restrict","require","falseValueRegExp","bsKey","charAt","toUpperCase","slice","test","bsOptions","parsedOptions","$parseOptions","typeahead","watchedOptions","$watchCollection","values","watchOptions","$match","$watch","ngModel","newValue","oldValue","$modelValue","valuesFn","selectMode","$viewValue","substring","displayValue","$formatters","push","modelValue","selected","ss","selectionStart","val","selectionEnd","setSelectionRange","sd","label","destroy","$on","target","placement","titleTemplate","title","type","autoClose","bsEnabled","mouseDownPreventDefault","mouseDownStopPropagation","viewport","selector","padding","TooltipFactory","inlineTemplate","$bsCompiler","$animate","$sce","dimensions","clearTimeout","hoverState","onShow","leaveAnimateCallback","onHide","tipElement","css","_tipToHide","_blur","blur","toggle","destroyTipElement","triggers","nodeName","split","on","isTouch","enter","unbindTriggerEvents","$onFocusElementMouseDown","i","bindKeyboardEvents","$onKeyUp","unbindKeyboardEvents","_autoCloseEventsBinded","bindAutoCloseEvents","$onFocusKeyUp","node","$body","event","parentNode","getPosition","el","elRect","p","rect","width","height","top","left","offset","scroll","outerDims","isBody","document","documentElement","scrollTop","body","prop","clientWidth","innerHeight","position","actualWidth","actualHeight","marginLeft","isNaN","setOffset","using","parseInt","props","right","marginTop","tip","offsetHeight","getViewportAdjustedDelta","delta","offsetWidth","isVertical","arrowDelta","replaceArrow","arrowOffsetPosition","viewportDimensions","$viewport","topEdgeOffset","bottomEdgeOffset","viewportPadding","leftEdgeOffset","rightEdgeOffset","dimension","isHorizontal","$arrow","unbindAutoCloseEvents","timeout","tipScope","$options","promise","$promise","deferred","$new","toLowerCase","$id","map","parseFloat","trustAsHtml","$setEnabled","id","$hide","setEnabled","isEnabled","compileData","tipContainer","init","bindTriggerEvents","isElement","focus","$destroy","onBeforeShow","after","parent","lastChild","display","visibility","clonedElement","prepend","addClass","prefixClass","customClass","$applyPlacement","enterAnimateCallback","version","minor","onBeforeHide","leave","autoPlace","autoToken","elementPosition","tipWidth","tipHeight","viewportPosition","originalPlacement","bottomOverlap","bottom","topOverlap","rightOverlap","leftOverlap","hasClass","removeClass","indexOf","tipPosition","getCalculatedOffset","applyPlacement","$root","query","querySelectorAll","isNative","defer","tooltip","transclusion","$eval","dataTarget","hasOwnProperty","$observe","bsTooltip","bsShow","match","setViewport","useNative","timeType","timeFormat","timezone","modelTimeFormat","autoclose","minTime","maxTime","Infinity","hourStep","minuteStep","secondStep","roundDisplay","iconUp","iconDown","arrowBehavior","$timepicker","timepickerFactory","formatDate","format","viewDate","hour","startDate","getHours","meridian","coeff","selRange","end","start","isUndefined","collapse","moveStart","moveEnd","focusElement","_init","floorMinutes","time","floor","lang","selectedIndex","date","defaultDate","second","getSeconds","millisecond","getMilliseconds","$dateValue","hoursFormat","$dateFormatter","timeSeparator","minute","minutesFormat","secondsFormat","showSeconds","$iconUp","$moveIndex","$switchMeridian","switchMeridian","isDate","getMinutes","getTime","$build","$isBuilt","keep","Date","setHours","setMinutes","setSeconds","midIndex","hours","disabled","minutes","$date","seconds","rows","$isDisabled","showAM","$isSelected","isAM","selectedTime","$arrowAction","$setTimeByStep","newDate","targetDate","targetEl","triggerHandler","hoursLength","minutesLength","sepLength","lateralMove","count","selectRange","incr","isSeconds","isMeridian","secondsLength","createSelection","createTextRange","_destroy","_show","_hide","timepickerElement","navigator","userAgent","isMaxValid","isValid","parsedTime","isMinValid","setFullYear","$setValidity","$parsers","unshift","viewValue","getTimeFormattedString","timepicker","dateParser","$dateParser","validateAgainstMinMaxTime","timezoneOffsetAdjust","NaN","parse","self","navClass","activeClass","$activeClass","$panes","$activePaneChangeListeners","$push","pane","$active","$attrs","$navClass","$remove","active","activeIndex","splice","$setActive","name","fn","$pane","$tab","transclude","ngModelCtrl","bsTabsCtrl","attrs","bsActivePane","parsedBsActivePane","assign","$parse","controllers","render","$isActive","multiple","allNoneButtons","sort","caretHtml","placeholder","allText","noneText","maxLength","maxLengthHtml","iconCheckmark","SelectFactory","$isMultiple","$showAllNoneButtons","$iconCheckmark","$allText","$activate","$selectNone","$updateActiveIndex","a","b","$apply","isArray","$getIndex","anchor","anchorCandidate","$selectScrollFix","$isIE","stopImmediatePropagation","ua","activeElement","tagName","e","selectElement","dataMultiple","inputEl","addEventListener","join","$isEmpty","spies","$document","windowEl","debounce","bodyEl","throttle","ScrollSpyFactory","scrollEl","isWindowSpy","scrollId","$$count","$scrollspy","unbindViewContentLoaded","unbindIncludeContentLoaded","trackedElements","sortedElements","activeTarget","debouncedCheckOffsets","viewportHeight","debouncedCheckPosition","throttledCheckPosition","checkPositionWithEventLoop","checkOffsets","checkPosition","docEl","$activateElement","offsetTop","setTimeout","source","$getTrackedElement","targetElement","querySelector","trackedElement","trackElement","toDelete","untrackElement","scrollspy","childEl","child","$progressbar","animate","content","$popover","PopoverFactory","requestAnimationFrame","bsPopover","popover","routeAttr","$navbar","liElements","li","liElement","pattern","path","RegExp","regexp","dot","cancelAnimationFrame","webkitRequestAnimationFrame","mozRequestAnimationFrame","rafSupported","raf","timer","cancel","supported","$values","valueName","keyName","displayFn","valueFn","ParseOptionsFactory","groupByFn","factory","offsetParent","docElement","ownerDocument","outer","window","getComputedStyle","extra","currentStyle","boxRect","getBoundingClientRect","style","curPosition","curLeft","curCSSTop","curTop","calculatePosition","curElem","curCSSLeft","curOffset","call","offsetParentRect","offsetParentEl","offsetParentElement","func","immediate","args","context","callNow","leading","wait","trailing","year","$localeProvider","milliseconds","ParseDate","prototype","noop","indexOfCaseInsensitive","len","str","toString","strict","DateParserFactory","day","month","getFullYear","getMonth","proto","isNumeric","toDate","regExpMap","sss","$locale","dateFilter","mm","literalRegex","formatParts","escapedLiteralFormat","dateElements","keys","escapedFormat","isFormatStringLiteral","part","trimLiteralEscapeChars","dateRegexParts","escapeReservedSymbols","text","re","abstractRegex","buildDateParseRegex","setMapForFormat","buildDateAbstractRegex","buildDateParseValuesMap","Object","valuesMatch","keyIndex","valueKey","valuesFunctionMap","valueFunction","valuesRegex","exec","setFnMap","setMap","m","HH","H","hh","h","EEEE","EEE","DATETIME_FORMATS","SHORTDAY","dd","d","MMMM","MMM","SHORTMONTH","MM","M","DAY","yyyy","yy","y","MONTH","s","setDate","setMonth","regex","$format","regExpForFormat","baseDate","formatRegex","formatSetMap","fromDate","getDate","today","getDateForAttribute","substr","getTimeForAttribute","daylightSavingAdjust","undo","getTimezoneOffset","getDefaultLocale","getDatetimeFormat","weekdaysShort","splitTimeFormat","service","backdrop","size","zIndex","bodyElement","backdropCount","dialogBaseZindex","validSizes","ModalFactory","$modal","unbindBackdropEvents","modalElement","hideOnBackdropClick","backdropElement","preventEventDefault","modalScope","backdropBaseZindex","$show","destroyModalElement","z-index","defaultPrevented","bindBackdropEvents","which","lg","sm","modalClass","bsModal","modal","matchesSelector","DropdownFactory","$dropdown","getTarget","items","dropdownElement","onBodyClick","Element","webkitMatchesSelector","mozMatchesSelector","msMatchesSelector","oMatchesSelector","nextSibling","tElement","removeChild","nodeType","tAttrs","dropdown","dateType","dateFormat","modelDateFormat","dayFormat","monthFormat","yearFormat","monthTitleFormat","yearTitleFormat","strictFormat","minDate","maxDate","startView","minView","startWeek","daysOfWeekDisabled","hasToday","hasClear","iconLeft","iconRight","DatepickerFactory","$datepicker","pickerViews","views","$iconLeft","$iconRight","$hasToday","$picker","$selectPane","$hasClear","$toggleMode","$views","$mode","setMode","$setToday","$clear","updateDisabledDates","disabledDateRanges","dateRanges","$setDisabledEl","mode","pristine","$updateSelected","built","isDisabled","steps","getUTCFullYear","getUTCMonth","UTC","getUTCDate","shiftKey","altKey","onKeyDown","datepickerElement","datepickerViews","previousValue","normalizeDateRanges","ranges","disabledRanges","datepicker","parsedDate","getDateFormattedString","validateAgainstMinMaxDate","disabledDates","arrays","mod","n","arr","weekDaysMin","weekDaysLabelsHtml","picker","weekDaysLabels","concat","firstDayOfMonth","firstDayOfMonthOffset","firstDate","firstDateOffset","build","days","isToday","toDateString","muted","showLabels","labels","isTodayDisabled","isSelected","getDay","months","lastDate","actualMonth","firstYear","years","actualYear","Array","setYear","startCollapsed","allowMultiple","activeIndexes","$targets","activeItems","activateItem","$collapse","$viewChangeListeners","$registerToggle","$toggles","$unregisterToggle","$unregisterTarget","deactivateItem","fixActiveItemIndexes","disallowToggle","isActive","$activeIndexes","bsCollapseCtrl","bsCollapseToggle","$registerTarget","action","toggleEvent","$button","constantValueRegExp","isInput","trueValue","falseValue","hasExoticValues","checked","toggleClass","bind","v","AsideFactory","$aside","bsAside","aside","AffixFactory","inlineStyles","$affix","setWidth","reset","initialOffsetTop","getRequiredAffixClass","_unpin","getScrollTop","scrollHeight","getScrollHeight","pageYOffset","offsetBottom","elementHeight","initialAffixTop","affixed","unpin","$parseOffsets","affix","offsetUnpin","$onResize","initialTop","$debouncedOnResize","initialPosition","affixTarget","option","duration","dismissable","AlertFactory","$alert","bsAlert","alert"],"mappings":"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","file":"angular-strap.min.js","sourcesContent":["(function(window, document, undefined) {\r\n'use strict';\r\n\r\n// Source: typeahead\\typeahead.js\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          var typeaheadElement = $typeahead.$element;\n          if(!$typeahead.$isShown) return;\n          hide();\n          if(!$typeahead.$isShown) return; // support preventing hide\n          if (typeaheadElement) typeaheadElement.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: tooltip\\tooltip.js\r\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        if (options.inlineTemplate) {\n          var deferred = $q.defer();\n          deferred.resolve();\n          $tooltip.$promise = deferred.promise;\n        }\n        else {\n          $tooltip.$promise = $bsCompiler.compile(options);\n        }\n        var promise = $tooltip.$promise;\n\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: inlineTemplate\n          if (options.inlineTemplate) {\n            options.inlineTemplate = angular.isElement(options.inlineTemplate) ? options.inlineTemplate : findElement(options.inlineTemplate, options.target && options.target[0]);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.inlineTemplate) {\n            tipElement = $tooltip.$element = options.inlineTemplate;\n          }\n          else {\n            if (options.container) {\n              parent = tipContainer;\n              if (tipContainer[0].lastChild) {\n                after = angular.element(tipContainer[0].lastChild);\n              } else {\n                after = null;\n              }\n            } else {\n              parent = null;\n              after = element;\n            }\n\n\n            // Hide any existing tipElement\n            if (tipElement) destroyTipElement();\n            // Fetch a cloned element linked from template\n            tipScope = $tooltip.$scope.$new();\n            tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n            // Set the initial positioning.  Make the tooltip invisible\n            // so IE doesn't try to focus on it off screen.\n            tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n          }\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          if (!options.inlineTemplate) {\n            // Append the element, without any animations.  If we append\n            // using $animate.enter, some of the animations cause the placement\n            // to be off due to the transforms.\n            if (after) {\n              after.after(tipElement);\n            } else {\n              parent.prepend(tipElement);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          if (options.inlineTemplate) {\n            enterAnimateCallback();\n          }\n          else {\n            // Once placed, animate it.\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.enter(tipElement, parent, after, enterAnimateCallback);\n            } else {\n              $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n            }\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n            $tooltip.$applyPlacement();\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (options.inlineTemplate) {\n            leaveAnimateCallback();\n          }\n          else {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            if (options.inlineTemplate) {\n              tipElement.css({display: '', visibility: ''});\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            // Determine if the vertical placement\n            var bottom = /bottom/.test(originalPlacement);\n            var top = /top/.test(originalPlacement);\n\n            if (bottom || top) {\n              var bottomOverlap = elementPosition.bottom - viewportPosition.bottom + tipHeight;\n              var topOverlap = viewportPosition.top - elementPosition.top + tipHeight;\n              if (bottom && bottomOverlap > 0 || top && topOverlap > 0) {\n                if (bottomOverlap < topOverlap) {\n                  if (top) {\n                    placement = originalPlacement.replace('top', 'bottom');\n                  }\n                }\n                else {\n                  if (bottom) {\n                    placement = originalPlacement.replace('bottom', 'top');\n                  }\n                }\n              }\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            var right = originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left';\n            var left = originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right';\n            if (right || left) {\n              var rightOverlap = elementPosition.right - viewportPosition.right + tipWidth;\n              var leftOverlap = viewportPosition.left - elementPosition.left + tipWidth;\n              if (right && rightOverlap > 0 || left && leftOverlap > 0) {\n                if (rightOverlap < leftOverlap) {\n                  if (left) {\n                    placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n                  }\n                }\n                else {\n                  if (right) {\n                    placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n                  }\n                }\n              }\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          if (options.target && (options.target.hasClass('dropdown') || options.target.hasClass('dropup'))) {\n            if (placement.indexOf('top') >= 0) {\n              options.target.removeClass('dropdown').addClass('dropup');\n            }\n            else {\n              options.target.removeClass('dropup').addClass('dropdown');\n            }\n\n            if (tipElement.hasClass('dropdown-menu')) {\n              if (placement.indexOf('left') >= 0) {\n                tipElement.removeClass('dropdown-menu-right');\n              }\n              else {\n                tipElement.addClass('dropdown-menu-right');\n              }\n            }\n          }\n          else {\n            // Get the tooltip's top and left coordinates to center it with this directive.\n            var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n            applyPlacement(tipPosition, placement);\n          }\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Hide when clicking outside tooltip\n            $body.on('click', hideIfNotChildEvent);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            $body.off('click', hideIfNotChildEvent);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function hideIfNotChildEvent (event) {\n          var node = event.target;\n          while (node) {\n            if (node === tipElement[0]) {\n              return;\n            }\n            if (node === $body[0]) {\n              $tooltip.hide();\n              return;\n            }\n            node = node.parentNode;\n          }\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            if (!options.inlineTemplate) {\n              tipElement.remove();\n            }\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: timepicker\\timepicker.js\r\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          var timepickerElement = $timepicker.$element;\n          if (!$timepicker.$isShown) return;\n          _hide(blur);\n          if (!$timepicker.$isShown) return; // support preventing hide\n          if (timepickerElement) timepickerElement.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: tab\\tab.js\r\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\r\n\r\n// Source: select\\select.js\r\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          var selectElement = $select.$element;\n          if(!$select.$isShown) return;\n          hide();\n          if($select.$isShown) return; // support preventing hide\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          selectElement.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: scrollspy\\scrollspy.js\r\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\r\n\r\n// Source: progressbar\\progressbar.js\r\nangular.module('mgcrea.ngStrap.progressbar', [])\n.provider('$progressbar', function (){\n    var defaults = {\n      type: '',\n      animate: true\n    };\n\n    this.$get = function (){\n      return {\n        defaults: defaults\n      };\n    };\n  })\n  .directive('bsProgressbar', function ($progressbar){\n    return {\n      restrict: 'E',\n      transclude: true,\n      replace: true,\n      templateUrl: 'progressbar/progressbar.tpl.html',\n      scope:{\n        value: '=',\n        type: '@',\n        animate: '=?'\n      },\n      link: function (scope, element, attr){\n        scope.type = scope.type || $progressbar.defaults.type;\n        scope.animate = angular.isDefined(scope.animate) ? scope.animate : $progressbar.defaults.animate;\n      }\n    };\n  });\r\n\r\n// Source: popover\\popover.js\r\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: navbar\\navbar.js\r\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\r\n\r\n// Source: helpers\\raf.js\r\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\r\n\r\n// Source: helpers\\parse-options.js\r\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\r\n\r\n// Source: helpers\\dimensions.js\r\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\r\n\r\n// Source: helpers\\debounce.js\r\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\r\n\r\n// Source: helpers\\date-parser.js\r\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\r\n\r\n// Source: helpers\\date-formatter.js\r\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\r\n\r\n// Source: helpers\\compiler.js\r\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\r\n\r\n// Source: modal\\modal.js\r\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n          else {\n            backdropElement.addClass('in');\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: dropdown\\dropdown.js\r\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.inlineTemplate === true) {\n          options.inlineTemplate = '.dropdown-menu';\n        }\n        if (options.inlineTemplate && !options.target) {\n          options.target = element.parent();\n        }\n\n        $dropdown = $tooltip(element, options);\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          var target = getTarget();\n          if (target.hasClass('dropdown') || target.hasClass('dropup')) target.addClass('open');\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          var dropdownElement = $dropdown.$element;\n          if (!$dropdown.$isShown) return;\n          hide();\n          if ($dropdown.$isShown) return; // support preventing hide\n          if (options.keyboard && dropdownElement) dropdownElement.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          var target = getTarget();\n          if (target.hasClass('dropdown') || target.hasClass('dropup')) target.removeClass('open');\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        function getTarget() {\n          return options.target || element.parent();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Directive options\n        var options = {};\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            options.template = nextSibling.outerHTML;\n            options.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          options.scope = scope;\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'target', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose', 'inlineTemplate'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\r\n\r\n// Source: datepicker\\datepicker.js\r\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          var datepickerElement = $datepicker.$element;\n          if (!$datepicker.$isShown) return;\n          _hide(blur);\n          if (!$datepicker.$isShown) return; // support preventing hide\n          datepickerElement.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\r\n\r\n// Source: collapse\\collapse.js\r\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\r\n\r\n// Source: button\\button.js\r\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\r\n\r\n// Source: aside\\aside.js\r\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: affix\\affix.js\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\r\n\r\n// Source: alert\\alert.js\r\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\r\n\r\n// Source: module.js\r\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse',\n  'mgcrea.ngStrap.progressbar'\n]);\r\n\r\n})(window, document);\r\n","'use strict';\n\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$typeahead', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'typeahead',\n      prefixEvent: '$typeahead',\n      placement: 'bottom-left',\n      templateUrl: 'typeahead/typeahead.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      minLength: 1,\n      filter: 'bsAsyncFilter',\n      limit: 6,\n      autoSelect: false,\n      comparator: '',\n      trimValue: true\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $$rAF, $timeout) {\n\n      function TypeaheadFactory (element, controller, config) {\n\n        var $typeahead = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $typeahead = $tooltip(element, options);\n        var parentScope = config.scope;\n        var scope = $typeahead.$scope;\n\n        scope.$resetMatches = function () {\n          scope.$matches = [];\n          scope.$activeIndex = options.autoSelect ? 0 : -1; // If set to 0, the first match will be highlighted\n        };\n        scope.$resetMatches();\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $typeahead.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $typeahead.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $typeahead.$isVisible();\n        };\n\n        // Public methods\n\n        $typeahead.update = function (matches) {\n          scope.$matches = matches;\n          if (scope.$activeIndex >= matches.length) {\n            scope.$activeIndex = options.autoSelect ? 0 : -1;\n          }\n\n          // wrap in a $timeout so the results are updated\n          // before repositioning\n          safeDigest(scope);\n          $$rAF($typeahead.$applyPlacement);\n        };\n\n        $typeahead.activate = function (index) {\n          scope.$activeIndex = index;\n        };\n\n        $typeahead.select = function (index) {\n          if (index === -1) return;\n          var value = scope.$matches[index].value;\n          // console.log('$setViewValue', value);\n          controller.$setViewValue(value);\n          controller.$render();\n          scope.$resetMatches();\n          if (parentScope) parentScope.$digest();\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $typeahead);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $typeahead);\n          }\n        };\n\n        // Protected methods\n\n        $typeahead.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return !!scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\n        };\n\n        $typeahead.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $typeahead.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown\n          evt.preventDefault();\n          evt.stopPropagation();\n        };\n\n        $typeahead.$onKeyDown = function (evt) {\n          if (!/(38|40|13)/.test(evt.keyCode)) return;\n\n          // Let ngSubmit pass if the typeahead tip is hidden or no option is selected\n          if ($typeahead.$isVisible() && !(evt.keyCode === 13 && scope.$activeIndex === -1)) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // Select with enter\n          if (evt.keyCode === 13 && scope.$matches.length) {\n            $typeahead.select(scope.$activeIndex);\n          // Navigate with keyboard\n          } else if (evt.keyCode === 38 && scope.$activeIndex > 0) {\n            scope.$activeIndex--;\n          } else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) {\n            scope.$activeIndex++;\n          } else if (angular.isUndefined(scope.$activeIndex)) {\n            scope.$activeIndex = 0;\n          }\n          scope.$digest();\n        };\n\n        // Overrides\n\n        var show = $typeahead.show;\n        $typeahead.show = function () {\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed immediately.\n          $timeout(function () {\n            if ($typeahead.$element) {\n              $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\n              if (options.keyboard) {\n                if (element) element.on('keydown', $typeahead.$onKeyDown);\n              }\n            }\n          }, 0, false);\n        };\n\n        var hide = $typeahead.hide;\n        $typeahead.hide = function () {\n          var typeaheadElement = $typeahead.$element;\n          if(!$typeahead.$isShown) return;\n          hide();\n          if(!$typeahead.$isShown) return; // support preventing hide\n          if (typeaheadElement) typeaheadElement.off('mousedown', $typeahead.$onMouseDown);\n          if (options.keyboard) {\n            if (element) element.off('keydown', $typeahead.$onKeyDown);\n          }\n          if (!options.autoSelect) {\n            $typeahead.activate(-1);\n          }\n        };\n\n        return $typeahead;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      TypeaheadFactory.defaults = defaults;\n      return TypeaheadFactory;\n\n    };\n\n  })\n\n  .filter('bsAsyncFilter', function ($filter) {\n    return function (array, expression, comparator) {\n      if (array && angular.isFunction(array.then)) {\n        return array.then(function (results) {\n          return $filter('filter')(results, expression, comparator);\n        });\n      }\n      return $filter('filter')(array, expression, comparator);\n    };\n  })\n\n  .directive('bsTypeahead', function ($window, $parse, $q, $typeahead, $parseOptions) {\n\n    var defaults = $typeahead.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Fixes firefox bug when using objects in model with typeahead\n        // Yes this breaks any other directive using a 'change' event on this input,\n        // but if it is using the 'change' event why is it used with typeahead?\n        element.off('change');\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'autoSelect', 'comparator', 'id', 'prefixEvent', 'prefixClass'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'trimValue', 'filter'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Disable browser autocompletion\n        if (!element.attr('autocomplete')) element.attr('autocomplete', 'off');\n\n        // Build proper bsOptions\n        var filter = angular.isDefined(options.filter) ? options.filter : defaults.filter;\n        var limit = options.limit || defaults.limit;\n        var comparator = options.comparator || defaults.comparator;\n\n        var bsOptions = attr.bsOptions;\n        if (filter) {\n          bsOptions += ' | ' + filter + ':$viewValue';\n          if (comparator) bsOptions += ':' + comparator;\n        }\n        if (limit) bsOptions += ' | limitTo:' + limit;\n        var parsedOptions = $parseOptions(bsOptions);\n\n        // Initialize typeahead\n        var typeahead = $typeahead(element, controller, options);\n\n        // Watch options on demand\n        if (options.watchOptions) {\n          // Watch bsOptions values before filtering for changes, drop function calls\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\n          scope.$watchCollection(watchedOptions, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\n              typeahead.update(values);\n              controller.$render();\n            });\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('$watch', element.attr('ng-model'), newValue);\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\n          parsedOptions.valuesFn(scope, controller)\n            .then(function (values) {\n              // Prevent input with no future prospect if selectMode is truthy\n              // @TODO test selectMode\n              if (options.selectMode && !values.length && newValue.length > 0) {\n                controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\n                return;\n              }\n              if (values.length > limit) values = values.slice(0, limit);\n              typeahead.update(values);\n              // Queue a new rendering that will leverage collection loading\n              controller.$render();\n            });\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var displayValue = parsedOptions.displayValue(modelValue);\n\n          // If we can determine the displayValue, use that\n          if (displayValue) {\n            return displayValue;\n          }\n\n          // If there's no display value, attempt to use the modelValue.\n          // If the model is an object not much we can do\n          if (angular.isDefined(modelValue) && typeof modelValue !== 'object') {\n            return modelValue;\n          }\n          return '';\n        });\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          if (controller.$isEmpty(controller.$viewValue)) {\n            return element.val('');\n          }\n          var index = typeahead.$getIndex(controller.$modelValue);\n          var selected = index !== -1 ? typeahead.$scope.$matches[index].label : controller.$viewValue;\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\n          var value = selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '') : '';\n          var ss = element[0].selectionStart;\n          var sd = element[0].selectionEnd;\n          element.val(options.trimValue === false ? value : value.trim());\n          element[0].setSelectionRange(ss, sd);\n        };\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (typeahead) typeahead.destroy();\n          options = null;\n          typeahead = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\n// NOTICE: This file was forked from the angular-material project (github.com/angular/material)\n// MIT Licensed - Copyright (c) 2014-2015 Google, Inc. http://angularjs.org\n\nangular.module('mgcrea.ngStrap.core', [])\n  .service('$bsCompiler', bsCompilerService);\n\nfunction bsCompilerService ($q, $http, $injector, $compile, $controller, $templateCache) {\n\n  /*\n   * @ngdoc service\n   * @name $bsCompiler\n   * @module material.core\n   * @description\n   * The $bsCompiler service is an abstraction of angular's compiler, that allows the developer\n   * to easily compile an element with a templateUrl, controller, and locals.\n   *\n   * @usage\n   * <hljs lang=\"js\">\n   * $bsCompiler.compile({\n   *   templateUrl: 'modal.html',\n   *   controller: 'ModalCtrl',\n   *   locals: {\n   *     modal: myModalInstance;\n   *   }\n   * }).then(function(compileData) {\n   *   compileData.element; // modal.html's template in an element\n   *   compileData.link(myScope); //attach controller & scope to element\n   * });\n   * </hljs>\n   */\n\n   /*\n    * @ngdoc method\n    * @name $bsCompiler#compile\n    * @description A helper to compile an HTML template/templateUrl with a given controller,\n    * locals, and scope.\n    * @param {object} options An options object, with the following properties:\n    *\n    *    - `controller` - `{(string=|function()=}` Controller fn that should be associated with\n    *      newly created scope or the name of a registered controller if passed as a string.\n    *    - `controllerAs` - `{string=}` A controller alias name. If present the controller will be\n    *      published to scope under the `controllerAs` name.\n    *    - `template` - `{string=}` An html template as a string.\n    *    - `templateUrl` - `{string=}` A path to an html template.\n    *    - `transformTemplate` - `{function(template)=}` A function which transforms the template after\n    *      it is loaded. It will be given the template string as a parameter, and should\n    *      return a a new string representing the transformed template.\n    *    - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\n    *      be injected into the controller. If any of these dependencies are promises, the compiler\n    *      will wait for them all to be resolved, or if one is rejected before the controller is\n    *      instantiated `compile()` will fail..\n    *      * `key` - `{string}`: a name of a dependency to be injected into the controller.\n    *      * `factory` - `{string|function}`: If `string` then it is an alias for a service.\n    *        Otherwise if function, then it is injected and the return value is treated as the\n    *        dependency. If the result is a promise, it is resolved before its value is\n    *        injected into the controller.\n    *\n    * @returns {object=} promise A promise, which will be resolved with a `compileData` object.\n    * `compileData` has the following properties:\n    *\n    *   - `element` - `{element}`: an uncompiled element matching the provided template.\n    *   - `link` - `{function(scope)}`: A link function, which, when called, will compile\n    *     the element and instantiate the provided controller (if given).\n    *   - `locals` - `{object}`: The locals which will be passed into the controller once `link` is\n    *     called. If `bindToController` is true, they will be coppied to the ctrl instead\n    *   - `bindToController` - `bool`: bind the locals to the controller, instead of passing them in.\n    */\n  this.compile = function (options) {\n\n    if (options.template && /\\.html$/.test(options.template)) {\n      console.warn('Deprecated use of `template` option to pass a file. Please use the `templateUrl` option instead.');\n      options.templateUrl = options.template;\n      options.template = '';\n    }\n\n    var templateUrl = options.templateUrl;\n    var template = options.template || '';\n    var controller = options.controller;\n    var controllerAs = options.controllerAs;\n    var resolve = angular.copy(options.resolve || {});\n    var locals = angular.copy(options.locals || {});\n    var transformTemplate = options.transformTemplate || angular.identity;\n    var bindToController = options.bindToController;\n\n    // Take resolve values and invoke them.\n    // Resolves can either be a string (value: 'MyRegisteredAngularConst'),\n    // or an invokable 'factory' of sorts: (value: function ValueGetter($dependency) {})\n    angular.forEach(resolve, function (value, key) {\n      if (angular.isString(value)) {\n        resolve[key] = $injector.get(value);\n      } else {\n        resolve[key] = $injector.invoke(value);\n      }\n    });\n    // Add the locals, which are just straight values to inject\n    // eg locals: { three: 3 }, will inject three into the controller\n    angular.extend(resolve, locals);\n\n    if (template) {\n      resolve.$template = $q.when(template);\n    } else if (templateUrl) {\n      resolve.$template = fetchTemplate(templateUrl);\n    } else {\n      throw new Error('Missing `template` / `templateUrl` option.');\n    }\n\n    if (options.titleTemplate) {\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.titleTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          findElement('[ng-bind=\"title\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    if (options.contentTemplate) {\n      // TODO(mgcrea): deprecate?\n      resolve.$template = $q.all([resolve.$template, fetchTemplate(options.contentTemplate)])\n        .then(function (templates) {\n          var templateEl = angular.element(templates[0]);\n          var contentEl = findElement('[ng-bind=\"content\"]', templateEl[0])\n            .removeAttr('ng-bind')\n            .html(templates[1]);\n          // Drop the default footer as you probably don't want it if you use a custom contentTemplate\n          if (!options.templateUrl) contentEl.next().remove();\n          return templateEl[0].outerHTML;\n        });\n    }\n\n    // Wait for all the resolves to finish if they are promises\n    return $q.all(resolve).then(function (locals) {\n\n      var template = transformTemplate(locals.$template);\n      if (options.html) {\n        template = template.replace(/ng-bind=\"/ig, 'ng-bind-html=\"');\n      }\n      // var element = options.element || angular.element('<div>').html(template.trim()).contents();\n      var element = angular.element('<div>').html(template.trim()).contents();\n      var linkFn = $compile(element);\n\n      // Return a linking function that can be used later when the element is ready\n      return {\n        locals: locals,\n        element: element,\n        link: function link (scope) {\n          locals.$scope = scope;\n\n          // Instantiate controller if it exists, because we have scope\n          if (controller) {\n            var invokeCtrl = $controller(controller, locals, true);\n            if (bindToController) {\n              angular.extend(invokeCtrl.instance, locals);\n            }\n            // Support angular@~1.2 invokeCtrl\n            var ctrl = angular.isObject(invokeCtrl) ? invokeCtrl : invokeCtrl();\n            // See angular-route source for this logic\n            element.data('$ngControllerController', ctrl);\n            element.children().data('$ngControllerController', ctrl);\n\n            if (controllerAs) {\n              scope[controllerAs] = ctrl;\n            }\n          }\n\n          return linkFn.apply(null, arguments);\n        }\n      };\n    });\n\n  };\n\n  function findElement (query, element) {\n    return angular.element((element || document).querySelectorAll(query));\n  }\n\n  var fetchPromises = {};\n  function fetchTemplate (template) {\n    if (fetchPromises[template]) return fetchPromises[template];\n    return (fetchPromises[template] = $http.get(template, {cache: $templateCache})\n      .then(function (res) {\n        return res.data;\n      }));\n  }\n\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.modal', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$modal', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      backdropAnimation: 'am-fade',\n      customClass: '',\n      prefixClass: 'modal',\n      prefixEvent: 'modal',\n      placement: 'top',\n      templateUrl: 'modal/modal.tpl.html',\n      template: '',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true,\n      size: null,\n      zIndex: null\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $animate, $timeout, $sce, dimensions) {\n\n      var forEach = angular.forEach;\n      var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n      var bodyElement = angular.element($window.document.body);\n\n      var backdropCount = 0;\n      var dialogBaseZindex = 1050;\n      var backdropBaseZindex = 1040;\n\n      var validSizes = {\n        lg: 'modal-lg',\n        sm: 'modal-sm'\n      };\n\n      function ModalFactory (config) {\n\n        var $modal = {};\n\n        // Common vars\n        var options = $modal.$options = angular.extend({}, defaults, config);\n        var promise = $modal.$promise = $bsCompiler.compile(options);\n        var scope = $modal.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (!options.element && !options.container) {\n          options.container = 'body';\n        }\n\n        if (options.zIndex) {\n          dialogBaseZindex = parseInt(options.zIndex, 10);\n          backdropBaseZindex = dialogBaseZindex - 10;\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $modal.$id = options.id || options.element && options.element.attr('id') || '';\n\n        // Support scope as string options\n        forEach(['title', 'content'], function (key) {\n          if (options[key]) scope[key] = $sce.trustAsHtml(options[key]);\n        });\n\n        // Provide scope helpers\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $modal.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $modal.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $modal.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $modal.$isShown = scope.$isShown = false;\n\n        // Fetch, compile then initialize modal\n        var compileData;\n        var modalElement;\n        var modalScope;\n        var backdropElement = angular.element('<div class=\"' + options.prefixClass + '-backdrop\"/>');\n        backdropElement.css({position: 'fixed', top: '0px', left: '0px', bottom: '0px', right: '0px'});\n        promise.then(function (data) {\n          compileData = data;\n          $modal.init();\n        });\n\n        $modal.init = function () {\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              $modal.show();\n            });\n          }\n\n        };\n\n        $modal.destroy = function () {\n\n          // Remove element\n          destroyModalElement();\n\n          // remove backdrop element\n          if (backdropElement) {\n            backdropElement.remove();\n            backdropElement = null;\n          }\n\n          // Destroy scope\n          scope.$destroy();\n        };\n\n        $modal.show = function () {\n          if ($modal.$isShown) return;\n\n          var parent;\n          var after;\n          if (angular.isElement(options.container)) {\n            parent = options.container;\n            after = options.container[0].lastChild ? angular.element(options.container[0].lastChild) : null;\n          } else {\n            if (options.container) {\n              parent = findElement(options.container);\n              after = parent[0] && parent[0].lastChild ? angular.element(parent[0].lastChild) : null;\n            } else {\n              parent = null;\n              after = options.element;\n            }\n          }\n\n          // destroy any existing modal elements\n          if (modalElement) destroyModalElement();\n\n          // create a new scope, so we can destroy it and all child scopes\n          // when destroying the modal element\n          modalScope = $modal.$scope.$new();\n          // Fetch a cloned element linked from template (noop callback is required)\n          modalElement = $modal.$element = compileData.link(modalScope, function (clonedElement, scope) {});\n\n          if (options.backdrop) {\n            // set z-index\n            modalElement.css({'z-index': dialogBaseZindex + (backdropCount * 20)});\n            backdropElement.css({'z-index': backdropBaseZindex + (backdropCount * 20)});\n\n            // increment number of backdrops\n            backdropCount++;\n          }\n\n          if (scope.$emit(options.prefixEvent + '.show.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($modal);\n          }\n\n          // Set the initial positioning.\n          modalElement.css({display: 'block'}).addClass(options.placement);\n\n          // Options: customClass\n          if (options.customClass) {\n            modalElement.addClass(options.customClass);\n          }\n\n          // Options: size\n          if (options.size && validSizes[options.size]) {\n            angular.element(findElement('.modal-dialog', modalElement[0])).addClass(validSizes[options.size]);\n          }\n\n          // Options: animation\n          if (options.animation) {\n            if (options.backdrop) {\n              backdropElement.addClass(options.backdropAnimation);\n            }\n            modalElement.addClass(options.animation);\n          }\n          else {\n            backdropElement.addClass('in');\n          }\n\n          if (options.backdrop) {\n            $animate.enter(backdropElement, bodyElement, null);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.enter(modalElement, parent, after, enterAnimateCallback);\n          } else {\n            $animate.enter(modalElement, parent, after).then(enterAnimateCallback);\n          }\n\n          $modal.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n          // Focus once the enter-animation has started\n          // Weird PhantomJS bug hack\n          var el = modalElement[0];\n          requestAnimationFrame(function () {\n            el.focus();\n          });\n\n          bodyElement.addClass(options.prefixClass + '-open');\n          if (options.animation) {\n            bodyElement.addClass(options.prefixClass + '-with-' + options.animation);\n          }\n\n          // Bind events\n          bindBackdropEvents();\n          bindKeyboardEvents();\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $modal);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($modal);\n          }\n        }\n\n        $modal.hide = function () {\n          if (!$modal.$isShown) return;\n\n          if (scope.$emit(options.prefixEvent + '.hide.before', $modal).defaultPrevented) {\n            return;\n          }\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($modal);\n          }\n\n          // Support v1.2+ $animate\n          // https://github.com/angular/angular.js/issues/11713\n          if (angular.version.minor <= 2) {\n            $animate.leave(modalElement, leaveAnimateCallback);\n          } else {\n            $animate.leave(modalElement).then(leaveAnimateCallback);\n          }\n\n          if (options.backdrop) {\n            // decrement number of backdrops\n            backdropCount--;\n            $animate.leave(backdropElement);\n          }\n          $modal.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          unbindBackdropEvents();\n          unbindKeyboardEvents();\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $modal);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($modal);\n          }\n          if (findElement('.modal').length <= 0) {\n            bodyElement.removeClass(options.prefixClass + '-open');\n          }\n          if (options.animation) {\n            bodyElement.removeClass(options.prefixClass + '-with-' + options.animation);\n          }\n        }\n\n        $modal.toggle = function () {\n          if ($modal.$isShown) {\n            $modal.hide();\n          } else {\n            $modal.show();\n          }\n        };\n\n        $modal.focus = function () {\n          modalElement[0].focus();\n        };\n\n        // Protected methods\n\n        $modal.$onKeyUp = function (evt) {\n\n          if (evt.which === 27 && $modal.$isShown) {\n            $modal.hide();\n            evt.stopPropagation();\n          }\n\n        };\n\n        function bindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.on('click', hideOnBackdropClick);\n            backdropElement.on('click', hideOnBackdropClick);\n            backdropElement.on('wheel', preventEventDefault);\n          }\n        }\n\n        function unbindBackdropEvents () {\n          if (options.backdrop) {\n            modalElement.off('click', hideOnBackdropClick);\n            backdropElement.off('click', hideOnBackdropClick);\n            backdropElement.off('wheel', preventEventDefault);\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.on('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.keyboard) {\n            modalElement.off('keyup', $modal.$onKeyUp);\n          }\n        }\n\n        // Private helpers\n\n        function hideOnBackdropClick (evt) {\n          if (evt.target !== evt.currentTarget) return;\n          if (options.backdrop === 'static') {\n            $modal.focus();\n          } else {\n            $modal.hide();\n          }\n        }\n\n        function preventEventDefault (evt) {\n          evt.preventDefault();\n        }\n\n        function destroyModalElement () {\n          if ($modal.$isShown && modalElement !== null) {\n            // un-bind events\n            unbindBackdropEvents();\n            unbindKeyboardEvents();\n          }\n\n          if (modalScope) {\n            modalScope.$destroy();\n            modalScope = null;\n          }\n\n          if (modalElement) {\n            modalElement.remove();\n            modalElement = $modal.$element = null;\n          }\n        }\n\n        return $modal;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return ModalFactory;\n\n    };\n\n  })\n\n  .directive('bsModal', function ($window, $sce, $parse, $modal) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation', 'backdropAnimation', 'id', 'prefixEvent', 'prefixClass', 'customClass', 'modalClass', 'size', 'zIndex'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Options: alias modalClass to customClass\n        if (options.modalClass) {\n          options.customClass = options.modalClass;\n        }\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsModal) {\n          scope.$watch(attr.bsModal, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize modal\n        var modal = $modal(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', modal.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (modal) modal.destroy();\n          options = null;\n          modal = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tooltip', ['mgcrea.ngStrap.core', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$tooltip', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      prefixClass: 'tooltip',\n      prefixEvent: 'tooltip',\n      container: false,\n      target: false,\n      placement: 'top',\n      templateUrl: 'tooltip/tooltip.tpl.html',\n      template: '',\n      titleTemplate: false,\n      trigger: 'hover focus',\n      keyboard: false,\n      html: false,\n      show: false,\n      title: '',\n      type: '',\n      delay: 0,\n      autoClose: false,\n      bsEnabled: true,\n      mouseDownPreventDefault: true,\n      mouseDownStopPropagation: true,\n      viewport: {\n        selector: 'body',\n        padding: 0\n      }\n    };\n\n    this.$get = function ($window, $rootScope, $bsCompiler, $q, $templateCache, $http, $animate, $sce, dimensions, $$rAF, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      var $body = angular.element($window.document);\n\n      function TooltipFactory (element, config) {\n\n        var $tooltip = {};\n\n        // Common vars\n        var options = $tooltip.$options = angular.extend({}, defaults, config);\n        if (options.inlineTemplate) {\n          var deferred = $q.defer();\n          deferred.resolve();\n          $tooltip.$promise = deferred.promise;\n        }\n        else {\n          $tooltip.$promise = $bsCompiler.compile(options);\n        }\n        var promise = $tooltip.$promise;\n\n        var scope = $tooltip.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        var nodeName = element[0].nodeName.toLowerCase();\n        if (options.delay && angular.isString(options.delay)) {\n          var split = options.delay.split(',').map(parseFloat);\n          options.delay = split.length > 1 ? {show: split[0], hide: split[1]} : split[0];\n        }\n\n        // Store $id to identify the triggering element in events\n        // give priority to options.id, otherwise, try to use\n        // element id if defined\n        $tooltip.$id = options.id || element.attr('id') || '';\n\n        // Support scope as string options\n        if (options.title) {\n          scope.title = $sce.trustAsHtml(options.title);\n        }\n\n        // Provide scope helpers\n        scope.$setEnabled = function (isEnabled) {\n          scope.$$postDigest(function () {\n            $tooltip.setEnabled(isEnabled);\n          });\n        };\n        scope.$hide = function () {\n          scope.$$postDigest(function () {\n            $tooltip.hide();\n          });\n        };\n        scope.$show = function () {\n          scope.$$postDigest(function () {\n            $tooltip.show();\n          });\n        };\n        scope.$toggle = function () {\n          scope.$$postDigest(function () {\n            $tooltip.toggle();\n          });\n        };\n        // Publish isShown as a protected var on scope\n        $tooltip.$isShown = scope.$isShown = false;\n\n        // Private vars\n        var timeout;\n        var hoverState;\n\n        // Fetch, compile then initialize tooltip\n        var compileData;\n        var tipElement;\n        var tipContainer;\n        var tipScope;\n        promise.then(function (data) {\n          compileData = data;\n          $tooltip.init();\n        });\n\n        $tooltip.init = function () {\n\n          // Options: delay\n          if (options.delay && angular.isNumber(options.delay)) {\n            options.delay = {\n              show: options.delay,\n              hide: options.delay\n            };\n          }\n\n          // Replace trigger on touch devices ?\n          // if(isTouch && options.trigger === defaults.trigger) {\n          //   options.trigger.replace(/hover/g, 'click');\n          // }\n\n          // Options : container\n          if (options.container === 'self') {\n            tipContainer = element;\n          } else if (angular.isElement(options.container)) {\n            tipContainer = options.container;\n          } else if (options.container) {\n            tipContainer = findElement(options.container);\n          }\n\n          // Options: trigger\n          bindTriggerEvents();\n\n          // Options: target\n          if (options.target) {\n            options.target = angular.isElement(options.target) ? options.target : findElement(options.target);\n          }\n\n          // Options: inlineTemplate\n          if (options.inlineTemplate) {\n            options.inlineTemplate = angular.isElement(options.inlineTemplate) ? options.inlineTemplate : findElement(options.inlineTemplate, options.target && options.target[0]);\n          }\n\n          // Options: show\n          if (options.show) {\n            scope.$$postDigest(function () {\n              if (options.trigger === 'focus') {\n                element[0].focus();\n              } else {\n                $tooltip.show();\n              }\n            });\n          }\n\n        };\n\n        $tooltip.destroy = function () {\n\n          // Unbind events\n          unbindTriggerEvents();\n\n          // Remove element\n          destroyTipElement();\n\n          // Destroy scope\n          scope.$destroy();\n\n        };\n\n        $tooltip.enter = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'in';\n          if (!options.delay || !options.delay.show) {\n            return $tooltip.show();\n          }\n\n          timeout = setTimeout(function () {\n            if (hoverState === 'in') $tooltip.show();\n          }, options.delay.show);\n\n        };\n\n        $tooltip.show = function () {\n          if (!options.bsEnabled || $tooltip.$isShown) return;\n\n          scope.$emit(options.prefixEvent + '.show.before', $tooltip);\n          if (angular.isDefined(options.onBeforeShow) && angular.isFunction(options.onBeforeShow)) {\n            options.onBeforeShow($tooltip);\n          }\n          var parent;\n          var after;\n          if (options.inlineTemplate) {\n            tipElement = $tooltip.$element = options.inlineTemplate;\n          }\n          else {\n            if (options.container) {\n              parent = tipContainer;\n              if (tipContainer[0].lastChild) {\n                after = angular.element(tipContainer[0].lastChild);\n              } else {\n                after = null;\n              }\n            } else {\n              parent = null;\n              after = element;\n            }\n\n\n            // Hide any existing tipElement\n            if (tipElement) destroyTipElement();\n            // Fetch a cloned element linked from template\n            tipScope = $tooltip.$scope.$new();\n            tipElement = $tooltip.$element = compileData.link(tipScope, function (clonedElement, scope) {});\n\n            // Set the initial positioning.  Make the tooltip invisible\n            // so IE doesn't try to focus on it off screen.\n            tipElement.css({top: '-9999px', left: '-9999px', right: 'auto', display: 'block', visibility: 'hidden'});\n          }\n\n          // Options: animation\n          if (options.animation) tipElement.addClass(options.animation);\n          // Options: type\n          if (options.type) tipElement.addClass(options.prefixClass + '-' + options.type);\n          // Options: custom classes\n          if (options.customClass) tipElement.addClass(options.customClass);\n\n          if (!options.inlineTemplate) {\n            // Append the element, without any animations.  If we append\n            // using $animate.enter, some of the animations cause the placement\n            // to be off due to the transforms.\n            if (after) {\n              after.after(tipElement);\n            } else {\n              parent.prepend(tipElement);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = true;\n          safeDigest(scope);\n\n          // Now, apply placement\n          $tooltip.$applyPlacement();\n\n          if (options.inlineTemplate) {\n            enterAnimateCallback();\n          }\n          else {\n            // Once placed, animate it.\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.enter(tipElement, parent, after, enterAnimateCallback);\n            } else {\n              $animate.enter(tipElement, parent, after).then(enterAnimateCallback);\n            }\n          }\n          safeDigest(scope);\n\n          $$rAF(function () {\n            // Once the tooltip is placed and the animation starts, make the tooltip visible\n            if (tipElement) tipElement.css({visibility: 'visible'});\n            $tooltip.$applyPlacement();\n\n            // Bind events\n            if (options.keyboard) {\n              if (options.trigger !== 'focus') {\n                $tooltip.focus();\n              }\n              bindKeyboardEvents();\n            }\n          });\n\n          if (options.autoClose) {\n            bindAutoCloseEvents();\n          }\n\n        };\n\n        function enterAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.show', $tooltip);\n          if (angular.isDefined(options.onShow) && angular.isFunction(options.onShow)) {\n            options.onShow($tooltip);\n          }\n        }\n\n        $tooltip.leave = function () {\n\n          clearTimeout(timeout);\n          hoverState = 'out';\n          if (!options.delay || !options.delay.hide) {\n            return $tooltip.hide();\n          }\n          timeout = setTimeout(function () {\n            if (hoverState === 'out') {\n              $tooltip.hide();\n            }\n          }, options.delay.hide);\n\n        };\n\n        var _blur;\n        var _tipToHide;\n        $tooltip.hide = function (blur) {\n\n          if (!$tooltip.$isShown) return;\n          scope.$emit(options.prefixEvent + '.hide.before', $tooltip);\n          if (angular.isDefined(options.onBeforeHide) && angular.isFunction(options.onBeforeHide)) {\n            options.onBeforeHide($tooltip);\n          }\n\n          // store blur value for leaveAnimateCallback to use\n          _blur = blur;\n\n          // store current tipElement reference to use\n          // in leaveAnimateCallback\n          _tipToHide = tipElement;\n\n          if (options.inlineTemplate) {\n            leaveAnimateCallback();\n          }\n          else {\n            // Support v1.2+ $animate\n            // https://github.com/angular/angular.js/issues/11713\n            if (angular.version.minor <= 2) {\n              $animate.leave(tipElement, leaveAnimateCallback);\n            } else {\n              $animate.leave(tipElement).then(leaveAnimateCallback);\n            }\n          }\n\n          $tooltip.$isShown = scope.$isShown = false;\n          safeDigest(scope);\n\n          // Unbind events\n          if (options.keyboard && tipElement !== null) {\n            unbindKeyboardEvents();\n          }\n\n          if (options.autoClose && tipElement !== null) {\n            unbindAutoCloseEvents();\n          }\n        };\n\n        function leaveAnimateCallback () {\n          scope.$emit(options.prefixEvent + '.hide', $tooltip);\n          if (angular.isDefined(options.onHide) && angular.isFunction(options.onHide)) {\n            options.onHide($tooltip);\n          }\n\n          // check if current tipElement still references\n          // the same element when hide was called\n          if (tipElement === _tipToHide) {\n            // Allow to blur the input when hidden, like when pressing enter key\n            if (_blur && options.trigger === 'focus') {\n              return element[0].blur();\n            }\n\n            if (options.inlineTemplate) {\n              tipElement.css({display: '', visibility: ''});\n            }\n\n            // clean up child scopes\n            destroyTipElement();\n          }\n        }\n\n        $tooltip.toggle = function (evt) {\n          if (evt) { evt.preventDefault(); }\n          if ($tooltip.$isShown) {\n            $tooltip.leave();\n          } else {\n            $tooltip.enter();\n          }\n        };\n\n        $tooltip.focus = function () {\n          tipElement[0].focus();\n        };\n\n        $tooltip.setEnabled = function (isEnabled) {\n          options.bsEnabled = isEnabled;\n        };\n\n        $tooltip.setViewport = function (viewport) {\n          options.viewport = viewport;\n        };\n\n        // Protected methods\n\n        $tooltip.$applyPlacement = function () {\n          if (!tipElement) return;\n\n          // Determine if we're doing an auto or normal placement\n          var placement = options.placement;\n          var autoToken = /\\s?auto?\\s?/i;\n          var autoPlace = autoToken.test(placement);\n\n          if (autoPlace) {\n            placement = placement.replace(autoToken, '') || defaults.placement;\n          }\n\n          // Need to add the position class before we get\n          // the offsets\n          tipElement.addClass(options.placement);\n\n          // Get the position of the target element\n          // and the height and width of the tooltip so we can center it.\n          var elementPosition = getPosition();\n          var tipWidth = tipElement.prop('offsetWidth');\n          var tipHeight = tipElement.prop('offsetHeight');\n\n          // Refresh viewport position\n          $tooltip.$viewport = options.viewport && findElement(options.viewport.selector || options.viewport);\n\n          // If we're auto placing, we need to check the positioning\n          if (autoPlace) {\n            var originalPlacement = placement;\n            var viewportPosition = getPosition($tooltip.$viewport);\n\n            // Determine if the vertical placement\n            var bottom = /bottom/.test(originalPlacement);\n            var top = /top/.test(originalPlacement);\n\n            if (bottom || top) {\n              var bottomOverlap = elementPosition.bottom - viewportPosition.bottom + tipHeight;\n              var topOverlap = viewportPosition.top - elementPosition.top + tipHeight;\n              if (bottom && bottomOverlap > 0 || top && topOverlap > 0) {\n                if (bottomOverlap < topOverlap) {\n                  if (top) {\n                    placement = originalPlacement.replace('top', 'bottom');\n                  }\n                }\n                else {\n                  if (bottom) {\n                    placement = originalPlacement.replace('bottom', 'top');\n                  }\n                }\n              }\n            }\n\n            // Determine the horizontal placement\n            // The exotic placements of left and right are opposite of the standard placements.  Their arrows are put on the left/right\n            // and flow in the opposite direction of their placement.\n            var right = originalPlacement === 'right' || originalPlacement === 'bottom-left' || originalPlacement === 'top-left';\n            var left = originalPlacement === 'left' || originalPlacement === 'bottom-right' || originalPlacement === 'top-right';\n            if (right || left) {\n              var rightOverlap = elementPosition.right - viewportPosition.right + tipWidth;\n              var leftOverlap = viewportPosition.left - elementPosition.left + tipWidth;\n              if (right && rightOverlap > 0 || left && leftOverlap > 0) {\n                if (rightOverlap < leftOverlap) {\n                  if (left) {\n                    placement = originalPlacement === 'left' ? 'right' : placement.replace('right', 'left');\n                  }\n                }\n                else {\n                  if (right) {\n                    placement = originalPlacement === 'right' ? 'left' : placement.replace('left', 'right');\n                  }\n                }\n              }\n            }\n\n            tipElement.removeClass(originalPlacement).addClass(placement);\n          }\n\n          if (options.target && (options.target.hasClass('dropdown') || options.target.hasClass('dropup'))) {\n            if (placement.indexOf('top') >= 0) {\n              options.target.removeClass('dropdown').addClass('dropup');\n            }\n            else {\n              options.target.removeClass('dropup').addClass('dropdown');\n            }\n\n            if (tipElement.hasClass('dropdown-menu')) {\n              if (placement.indexOf('left') >= 0) {\n                tipElement.removeClass('dropdown-menu-right');\n              }\n              else {\n                tipElement.addClass('dropdown-menu-right');\n              }\n            }\n          }\n          else {\n            // Get the tooltip's top and left coordinates to center it with this directive.\n            var tipPosition = getCalculatedOffset(placement, elementPosition, tipWidth, tipHeight);\n            applyPlacement(tipPosition, placement);\n          }\n        };\n\n        $tooltip.$onKeyUp = function (evt) {\n          if (evt.which === 27 && $tooltip.$isShown) {\n            $tooltip.hide();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusKeyUp = function (evt) {\n          if (evt.which === 27) {\n            element[0].blur();\n            evt.stopPropagation();\n          }\n        };\n\n        $tooltip.$onFocusElementMouseDown = function (evt) {\n          if (options.mouseDownPreventDefault) { evt.preventDefault(); }\n          if (options.mouseDownStopPropagation) { evt.stopPropagation(); }\n          // Some browsers do not auto-focus buttons (eg. Safari)\n          if ($tooltip.$isShown) {\n            element[0].blur();\n          } else {\n            element[0].focus();\n          }\n        };\n\n        // bind/unbind events\n        function bindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          angular.forEach(triggers, function (trigger) {\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.on(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.on(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.on(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.on(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          });\n        }\n\n        function unbindTriggerEvents () {\n          var triggers = options.trigger.split(' ');\n          for (var i = triggers.length; i--;) {\n            var trigger = triggers[i];\n            if (trigger === 'click' || trigger === 'contextmenu') {\n              element.off(trigger, $tooltip.toggle);\n            } else if (trigger !== 'manual') {\n              element.off(trigger === 'hover' ? 'mouseenter' : 'focus', $tooltip.enter);\n              element.off(trigger === 'hover' ? 'mouseleave' : 'blur', $tooltip.leave);\n              if (nodeName === 'button' && trigger !== 'hover') {\n                element.off(isTouch ? 'touchstart' : 'mousedown', $tooltip.$onFocusElementMouseDown);\n              }\n            }\n          }\n        }\n\n        function bindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.on('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.on('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        function unbindKeyboardEvents () {\n          if (options.trigger !== 'focus') {\n            tipElement.off('keyup', $tooltip.$onKeyUp);\n          } else {\n            element.off('keyup', $tooltip.$onFocusKeyUp);\n          }\n        }\n\n        var _autoCloseEventsBinded = false;\n        function bindAutoCloseEvents () {\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // Hide when clicking outside tooltip\n            $body.on('click', hideIfNotChildEvent);\n\n            _autoCloseEventsBinded = true;\n          }, 0, false);\n        }\n\n        function unbindAutoCloseEvents () {\n          if (_autoCloseEventsBinded) {\n            $body.off('click', hideIfNotChildEvent);\n            _autoCloseEventsBinded = false;\n          }\n        }\n\n        function hideIfNotChildEvent (event) {\n          var node = event.target;\n          while (node) {\n            if (node === tipElement[0]) {\n              return;\n            }\n            if (node === $body[0]) {\n              $tooltip.hide();\n              return;\n            }\n            node = node.parentNode;\n          }\n        }\n\n        // Private methods\n\n        function getPosition ($element) {\n          $element = $element || (options.target || element);\n\n          var el = $element[0];\n          var isBody = el.tagName === 'BODY';\n\n          var elRect = el.getBoundingClientRect();\n          var rect = {};\n\n          // IE8 has issues with angular.extend and using elRect directly.\n          // By coping the values of elRect into a new object, we can continue to use extend\n          /* eslint-disable guard-for-in */\n          for (var p in elRect) { // eslint-disable-line\n            // DO NOT use hasOwnProperty when inspecting the return of getBoundingClientRect.\n            rect[p] = elRect[p];\n          }\n          /* eslint-enable guard-for-in */\n\n          if (rect.width === null) {\n            // width and height are missing in IE8, so compute them manually; see https://github.com/twbs/bootstrap/issues/14093\n            rect = angular.extend({}, rect, {width: elRect.right - elRect.left, height: elRect.bottom - elRect.top});\n          }\n          var elOffset = isBody ? {top: 0, left: 0} : dimensions.offset(el);\n          var scroll = {scroll: isBody ? document.documentElement.scrollTop || document.body.scrollTop : $element.prop('scrollTop') || 0};\n          var outerDims = isBody ? {width: document.documentElement.clientWidth, height: $window.innerHeight} : null;\n\n          return angular.extend({}, rect, scroll, outerDims, elOffset);\n        }\n\n        function getCalculatedOffset (placement, position, actualWidth, actualHeight) {\n          var offset;\n          var split = placement.split('-');\n\n          switch (split[0]) {\n            case 'right':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left + position.width\n              };\n              break;\n            case 'bottom':\n              offset = {\n                top: position.top + position.height,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n            case 'left':\n              offset = {\n                top: position.top + position.height / 2 - actualHeight / 2,\n                left: position.left - actualWidth\n              };\n              break;\n            default:\n              offset = {\n                top: position.top - actualHeight,\n                left: position.left + position.width / 2 - actualWidth / 2\n              };\n              break;\n          }\n\n          if (!split[1]) {\n            return offset;\n          }\n\n          // Add support for corners @todo css\n          if (split[0] === 'top' || split[0] === 'bottom') {\n            switch (split[1]) {\n              case 'left':\n                offset.left = position.left;\n                break;\n              case 'right':\n                offset.left = position.left + position.width - actualWidth;\n                break;\n              default:\n                break;\n            }\n          } else if (split[0] === 'left' || split[0] === 'right') {\n            switch (split[1]) {\n              case 'top':\n                offset.top = position.top - actualHeight + position.height;\n                break;\n              case 'bottom':\n                offset.top = position.top;\n                break;\n              default:\n                break;\n            }\n          }\n\n          return offset;\n        }\n\n        function applyPlacement (offset, placement) {\n          var tip = tipElement[0];\n          var width = tip.offsetWidth;\n          var height = tip.offsetHeight;\n\n          // manually read margins because getBoundingClientRect includes difference\n          var marginTop = parseInt(dimensions.css(tip, 'margin-top'), 10);\n          var marginLeft = parseInt(dimensions.css(tip, 'margin-left'), 10);\n\n          // we must check for NaN for ie 8/9\n          if (isNaN(marginTop)) marginTop = 0;\n          if (isNaN(marginLeft)) marginLeft = 0;\n\n          offset.top = offset.top + marginTop;\n          offset.left = offset.left + marginLeft;\n\n          // dimensions setOffset doesn't round pixel values\n          // so we use setOffset directly with our own function\n          dimensions.setOffset(tip, angular.extend({\n            using: function (props) {\n              tipElement.css({\n                top: Math.round(props.top) + 'px',\n                left: Math.round(props.left) + 'px',\n                right: ''\n              });\n            }\n          }, offset), 0);\n\n          // check to see if placing tip in new offset caused the tip to resize itself\n          var actualWidth = tip.offsetWidth;\n          var actualHeight = tip.offsetHeight;\n\n          if (placement === 'top' && actualHeight !== height) {\n            offset.top = offset.top + height - actualHeight;\n          }\n\n          // If it's an exotic placement, exit now instead of\n          // applying a delta and changing the arrow\n          if (/top-left|top-right|bottom-left|bottom-right/.test(placement)) return;\n\n          var delta = getViewportAdjustedDelta(placement, offset, actualWidth, actualHeight);\n\n          if (delta.left) {\n            offset.left += delta.left;\n          } else {\n            offset.top += delta.top;\n          }\n\n          dimensions.setOffset(tip, offset);\n\n          if (/top|right|bottom|left/.test(placement)) {\n            var isVertical = /top|bottom/.test(placement);\n            var arrowDelta = isVertical ? delta.left * 2 - width + actualWidth : delta.top * 2 - height + actualHeight;\n            var arrowOffsetPosition = isVertical ? 'offsetWidth' : 'offsetHeight';\n\n            replaceArrow(arrowDelta, tip[arrowOffsetPosition], isVertical);\n          }\n        }\n\n        // @source https://github.com/twbs/bootstrap/blob/v3.3.5/js/tooltip.js#L380\n        function getViewportAdjustedDelta (placement, position, actualWidth, actualHeight) {\n          var delta = {top: 0, left: 0};\n          if (!$tooltip.$viewport) return delta;\n\n          var viewportPadding = options.viewport && options.viewport.padding || 0;\n          var viewportDimensions = getPosition($tooltip.$viewport);\n\n          if (/right|left/.test(placement)) {\n            var topEdgeOffset = position.top - viewportPadding - viewportDimensions.scroll;\n            var bottomEdgeOffset = position.top + viewportPadding - viewportDimensions.scroll + actualHeight;\n            if (topEdgeOffset < viewportDimensions.top) { // top overflow\n              delta.top = viewportDimensions.top - topEdgeOffset;\n            } else if (bottomEdgeOffset > viewportDimensions.top + viewportDimensions.height) { // bottom overflow\n              delta.top = viewportDimensions.top + viewportDimensions.height - bottomEdgeOffset;\n            }\n          } else {\n            var leftEdgeOffset = position.left - viewportPadding;\n            var rightEdgeOffset = position.left + viewportPadding + actualWidth;\n            if (leftEdgeOffset < viewportDimensions.left) { // left overflow\n              delta.left = viewportDimensions.left - leftEdgeOffset;\n            } else if (rightEdgeOffset > viewportDimensions.right) { // right overflow\n              delta.left = viewportDimensions.left + viewportDimensions.width - rightEdgeOffset;\n            }\n          }\n\n          return delta;\n        }\n\n        function replaceArrow (delta, dimension, isHorizontal) {\n          var $arrow = findElement('.tooltip-arrow, .arrow', tipElement[0]);\n\n          $arrow.css(isHorizontal ? 'left' : 'top', 50 * (1 - delta / dimension) + '%')\n                .css(isHorizontal ? 'top' : 'left', '');\n        }\n\n        function destroyTipElement () {\n          // Cancel pending callbacks\n          clearTimeout(timeout);\n\n          if ($tooltip.$isShown && tipElement !== null) {\n            if (options.autoClose) {\n              unbindAutoCloseEvents();\n            }\n\n            if (options.keyboard) {\n              unbindKeyboardEvents();\n            }\n          }\n\n          if (tipScope) {\n            tipScope.$destroy();\n            tipScope = null;\n          }\n\n          if (tipElement) {\n            if (!options.inlineTemplate) {\n              tipElement.remove();\n            }\n            tipElement = $tooltip.$element = null;\n          }\n        }\n\n        return $tooltip;\n\n      }\n\n      // Helper functions\n\n      function safeDigest (scope) {\n        /* eslint-disable no-unused-expressions */\n        scope.$$phase || (scope.$root && scope.$root.$$phase) || scope.$digest();\n        /* eslint-enable no-unused-expressions */\n      }\n\n      function findElement (query, element) {\n        return angular.element((element || document).querySelectorAll(query));\n      }\n\n      return TooltipFactory;\n\n    };\n\n  })\n\n  .directive('bsTooltip', function ($window, $location, $sce, $parse, $tooltip, $$rAF) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        var tooltip;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'titleTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'backdropAnimation', 'type', 'customClass', 'id'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Observe scope attributes for change\n        attr.$observe('title', function (newValue) {\n          if (angular.isDefined(newValue) || !scope.hasOwnProperty('title')) {\n            var oldValue = scope.title;\n            scope.title = $sce.trustAsHtml(newValue);\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }\n        });\n\n        attr.$observe('disabled', function (newValue) {\n          if (newValue && tooltip.$isShown) {\n            tooltip.hide();\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsTooltip) {\n          scope.$watch(attr.bsTooltip, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.title = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              $$rAF(function () {\n                if (tooltip) tooltip.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(tooltip),?/i);\n            if (newValue === true) {\n              tooltip.show();\n            } else {\n              tooltip.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue, oldValue) {\n            // console.warn('scope.$watch(%s)', attr.bsEnabled, newValue, oldValue);\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(tooltip),?/i);\n            if (newValue === false) {\n              tooltip.setEnabled(false);\n            } else {\n              tooltip.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!tooltip || !angular.isDefined(newValue)) return;\n            tooltip.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        tooltip = $tooltip(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (tooltip) tooltip.destroy();\n          options = null;\n          tooltip = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.timepicker', ['mgcrea.ngStrap.helpers.dateParser', 'mgcrea.ngStrap.helpers.dateFormatter', 'mgcrea.ngStrap.tooltip'])\n\n  .provider('$timepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      defaultDate: 'auto',\n      // uncommenting the following line will break backwards compatability\n      // prefixEvent: 'timepicker',\n      prefixClass: 'timepicker',\n      placement: 'bottom-left',\n      templateUrl: 'timepicker/timepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: true,\n      timeType: 'date',\n      timeFormat: 'shortTime',\n      timezone: null,\n      modelTimeFormat: null,\n      autoclose: false,\n      minTime: -Infinity,\n      maxTime: +Infinity,\n      length: 5,\n      hourStep: 1,\n      minuteStep: 5,\n      secondStep: 5,\n      roundDisplay: false,\n      iconUp: 'glyphicon glyphicon-chevron-up',\n      iconDown: 'glyphicon glyphicon-chevron-down',\n      arrowBehavior: 'pager'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) {\n        defaults.lang = $dateFormatter.getDefaultLocale();\n      }\n\n      function timepickerFactory (element, controller, config) {\n\n        var $timepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $timepicker.$options;\n        var scope = $timepicker.$scope;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        function floorMinutes (time) {\n          // coeff used to floor current time to nearest minuteStep interval\n          var coeff = 1000 * 60 * options.minuteStep;\n          return new Date(Math.floor(time.getTime() / coeff) * coeff);\n        }\n\n        // View vars\n\n        var selectedIndex = 0;\n        var defaultDate = options.roundDisplay ? floorMinutes(new Date()) : new Date();\n        var startDate = controller.$dateValue || defaultDate;\n        var viewDate = {\n          hour: startDate.getHours(),\n          meridian: startDate.getHours() < 12,\n          minute: startDate.getMinutes(),\n          second: startDate.getSeconds(),\n          millisecond: startDate.getMilliseconds()\n        };\n\n        var format = $dateFormatter.getDatetimeFormat(options.timeFormat, lang);\n\n        var hoursFormat = $dateFormatter.hoursFormat(format);\n        var timeSeparator = $dateFormatter.timeSeparator(format);\n        var minutesFormat = $dateFormatter.minutesFormat(format);\n        var secondsFormat = $dateFormatter.secondsFormat(format);\n        var showSeconds = $dateFormatter.showSeconds(format);\n        var showAM = $dateFormatter.showAM(format);\n\n        scope.$iconUp = options.iconUp;\n        scope.$iconDown = options.iconDown;\n\n        // Scope methods\n\n        scope.$select = function (date, index) {\n          $timepicker.select(date, index);\n        };\n        scope.$moveIndex = function (value, index) {\n          $timepicker.$moveIndex(value, index);\n        };\n        scope.$switchMeridian = function (date) {\n          $timepicker.switchMeridian(date);\n        };\n\n        // Public methods\n\n        $timepicker.update = function (date) {\n          // console.warn('$timepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $timepicker.$date = date;\n            angular.extend(viewDate, {\n              hour: date.getHours(),\n              minute: date.getMinutes(),\n              second: date.getSeconds(),\n              millisecond: date.getMilliseconds()\n            });\n            $timepicker.$build();\n          } else if (!$timepicker.$isBuilt) {\n            $timepicker.$build();\n          }\n        };\n\n        $timepicker.select = function (date, index, keep) {\n          // console.warn('$timepicker.select', date, scope.$mode);\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            controller.$dateValue = options.defaultDate === 'today' ? new Date() : new Date(1970, 0, 1);\n          }\n\n          if (!angular.isDate(date)) date = new Date(date);\n          if (index === 0) controller.$dateValue.setHours(date.getHours());\n          else if (index === 1) controller.$dateValue.setMinutes(date.getMinutes());\n          else if (index === 2) controller.$dateValue.setSeconds(date.getSeconds());\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n          if (options.autoclose && !keep) {\n            $timeout(function () {\n              $timepicker.hide(true);\n            });\n          }\n        };\n\n        $timepicker.switchMeridian = function (date) {\n          if (!controller.$dateValue || isNaN(controller.$dateValue.getTime())) {\n            return;\n          }\n          var hours = (date || controller.$dateValue).getHours();\n          controller.$dateValue.setHours(hours < 12 ? hours + 12 : hours - 12);\n          controller.$setViewValue(angular.copy(controller.$dateValue));\n          controller.$render();\n        };\n\n        // Protected methods\n\n        $timepicker.$build = function () {\n          // console.warn('$timepicker.$build() viewDate=%o', viewDate);\n          var i;\n          var midIndex = scope.midIndex = parseInt(options.length / 2, 10);\n          var hours = [];\n          var hour;\n          for (i = 0; i < options.length; i++) {\n            hour = new Date(1970, 0, 1, viewDate.hour - (midIndex - i) * options.hourStep);\n            hours.push({\n              date: hour,\n              label: formatDate(hour, hoursFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(hour, 0),\n              disabled: $timepicker.$isDisabled(hour, 0)\n            });\n          }\n          var minutes = [];\n          var minute;\n          for (i = 0; i < options.length; i++) {\n            minute = new Date(1970, 0, 1, 0, viewDate.minute - (midIndex - i) * options.minuteStep);\n            minutes.push({\n              date: minute,\n              label: formatDate(minute, minutesFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(minute, 1),\n              disabled: $timepicker.$isDisabled(minute, 1)\n            });\n          }\n          var seconds = [];\n          var second;\n          for (i = 0; i < options.length; i++) {\n            second = new Date(1970, 0, 1, 0, 0, viewDate.second - (midIndex - i) * options.secondStep);\n            seconds.push({\n              date: second,\n              label: formatDate(second, secondsFormat),\n              selected: $timepicker.$date && $timepicker.$isSelected(second, 2),\n              disabled: $timepicker.$isDisabled(second, 2)\n            });\n          }\n\n          var rows = [];\n          for (i = 0; i < options.length; i++) {\n            if (showSeconds) {\n              rows.push([hours[i], minutes[i], seconds[i]]);\n            } else {\n              rows.push([hours[i], minutes[i]]);\n            }\n          }\n          scope.rows = rows;\n          scope.showSeconds = showSeconds;\n          scope.showAM = showAM;\n          scope.isAM = ($timepicker.$date || hours[midIndex].date).getHours() < 12;\n          scope.timeSeparator = timeSeparator;\n          $timepicker.$isBuilt = true;\n        };\n\n        $timepicker.$isSelected = function (date, index) {\n          if (!$timepicker.$date) return false;\n          else if (index === 0) {\n            return date.getHours() === $timepicker.$date.getHours();\n          } else if (index === 1) {\n            return date.getMinutes() === $timepicker.$date.getMinutes();\n          } else if (index === 2) {\n            return date.getSeconds() === $timepicker.$date.getSeconds();\n          }\n        };\n\n        $timepicker.$isDisabled = function (date, index) {\n          var selectedTime;\n          if (index === 0) {\n            selectedTime = date.getTime() + viewDate.minute * 6e4 + viewDate.second * 1e3;\n          } else if (index === 1) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.second * 1e3;\n          } else if (index === 2) {\n            selectedTime = date.getTime() + viewDate.hour * 36e5 + viewDate.minute * 6e4;\n          }\n          return selectedTime < options.minTime * 1 || selectedTime > options.maxTime * 1;\n        };\n\n        scope.$arrowAction = function (value, index) {\n          if (options.arrowBehavior === 'picker') {\n            $timepicker.$setTimeByStep(value, index);\n          } else {\n            $timepicker.$moveIndex(value, index);\n          }\n        };\n\n        $timepicker.$setTimeByStep = function (value, index) {\n          var newDate = new Date($timepicker.$date || startDate);\n          var hours = newDate.getHours();\n          var minutes = newDate.getMinutes();\n          var seconds = newDate.getSeconds();\n          if (index === 0) {\n            newDate.setHours(hours - (parseInt(options.hourStep, 10) * value));\n          } else if (index === 1) {\n            newDate.setMinutes(minutes - (parseInt(options.minuteStep, 10) * value));\n          } else if (index === 2) {\n            newDate.setSeconds(seconds - (parseInt(options.secondStep, 10) * value));\n          }\n          $timepicker.select(newDate, index, true);\n        };\n\n        $timepicker.$moveIndex = function (value, index) {\n          var targetDate;\n          if (index === 0) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour + (value * options.length), viewDate.minute, viewDate.second);\n            angular.extend(viewDate, {\n              hour: targetDate.getHours()\n            });\n          } else if (index === 1) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute + (value * options.length * options.minuteStep), viewDate.second);\n            angular.extend(viewDate, {\n              minute: targetDate.getMinutes()\n            });\n          } else if (index === 2) {\n            targetDate = new Date(1970, 0, 1, viewDate.hour, viewDate.minute, viewDate.second + (value * options.length * options.secondStep));\n            angular.extend(viewDate, {\n              second: targetDate.getSeconds()\n            });\n          }\n          $timepicker.$build();\n        };\n\n        $timepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          if (evt.target.nodeName.toLowerCase() !== 'input') evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $timepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Close on enter\n          if (evt.keyCode === 13) {\n            $timepicker.hide(true);\n            return;\n          }\n\n          // Navigate with keyboard\n          var newDate = new Date($timepicker.$date);\n          var hours = newDate.getHours();\n          var hoursLength = formatDate(newDate, hoursFormat).length;\n          var minutes = newDate.getMinutes();\n          var minutesLength = formatDate(newDate, minutesFormat).length;\n          var seconds = newDate.getSeconds();\n          var secondsLength = formatDate(newDate, secondsFormat).length;\n          var sepLength = 1;\n          var lateralMove = /(37|39)/.test(evt.keyCode);\n          var count = 2 + showSeconds * 1 + showAM * 1;\n\n          // Navigate indexes (left, right)\n          if (lateralMove) {\n            if (evt.keyCode === 37) selectedIndex = selectedIndex < 1 ? count - 1 : selectedIndex - 1;\n            else if (evt.keyCode === 39) selectedIndex = selectedIndex < count - 1 ? selectedIndex + 1 : 0;\n          }\n\n          // Update values (up, down)\n          var selectRange = [0, hoursLength];\n          var incr = 0;\n          if (evt.keyCode === 38) incr = -1;\n          if (evt.keyCode === 40) incr = +1;\n          var isSeconds = selectedIndex === 2 && showSeconds;\n          var isMeridian = selectedIndex === 2 && !showSeconds || selectedIndex === 3 && showSeconds;\n          if (selectedIndex === 0) {\n            newDate.setHours(hours + incr * parseInt(options.hourStep, 10));\n            // re-calculate hours length because we have changed hours value\n            hoursLength = formatDate(newDate, hoursFormat).length;\n            selectRange = [0, hoursLength];\n          } else if (selectedIndex === 1) {\n            newDate.setMinutes(minutes + incr * parseInt(options.minuteStep, 10));\n            // re-calculate minutes length because we have changes minutes value\n            minutesLength = formatDate(newDate, minutesFormat).length;\n            selectRange = [hoursLength + sepLength, minutesLength];\n          } else if (isSeconds) {\n            newDate.setSeconds(seconds + incr * parseInt(options.secondStep, 10));\n            // re-calculate seconds length because we have changes seconds value\n            secondsLength = formatDate(newDate, secondsFormat).length;\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength, secondsLength];\n          } else if (isMeridian) {\n            if (!lateralMove) $timepicker.switchMeridian();\n            selectRange = [hoursLength + sepLength + minutesLength + sepLength + (secondsLength + sepLength) * showSeconds, 2];\n          }\n          $timepicker.select(newDate, selectedIndex, true);\n          createSelection(selectRange[0], selectRange[1]);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function createSelection (start, length) {\n          var end = start + length;\n          if (element[0].createTextRange) {\n            var selRange = element[0].createTextRange();\n            selRange.collapse(true);\n            selRange.moveStart('character', start);\n            selRange.moveEnd('character', end);\n            selRange.select();\n          } else if (element[0].setSelectionRange) {\n            element[0].setSelectionRange(start, end);\n          } else if (angular.isUndefined(element[0].selectionStart)) {\n            element[0].selectionStart = start;\n            element[0].selectionEnd = end;\n          }\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $timepicker.init;\n        $timepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'time');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $timepicker.destroy;\n        $timepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $timepicker.show;\n        $timepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if ($timepicker.$element) $timepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n            if (options.keyboard) {\n              if (element) element.on('keydown', $timepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $timepicker.hide;\n        $timepicker.hide = function (blur) {\n          var timepickerElement = $timepicker.$element;\n          if (!$timepicker.$isShown) return;\n          _hide(blur);\n          if (!$timepicker.$isShown) return; // support preventing hide\n          if (timepickerElement) timepickerElement.off(isTouch ? 'touchstart' : 'mousedown', $timepicker.$onMouseDown);\n          if (options.keyboard) {\n            element && element.off('keydown', $timepicker.$onKeyDown);\n          }\n        };\n\n        return $timepicker;\n\n      }\n\n      timepickerFactory.defaults = defaults;\n      return timepickerFactory;\n\n    };\n\n  })\n\n\n  .directive('bsTimepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $timepicker) {\n\n    var defaults = $timepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {\n          scope: scope\n        };\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'autoclose', 'timeType', 'timeFormat', 'timezone', 'modelTimeFormat', 'useNative', 'hourStep', 'minuteStep', 'secondStep', 'length', 'arrowBehavior', 'iconUp', 'iconDown', 'roundDisplay', 'id', 'prefixClass', 'prefixEvent', 'defaultDate'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'roundDisplay'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize timepicker\n        if (isNative && (options.useNative || defaults.useNative)) options.timeFormat = 'HH:mm';\n        var timepicker = $timepicker(element, controller, options);\n        options = timepicker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format, timezone) {\n          return $dateFormatter.formatDate(date, format, lang, timezone);\n        };\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!timepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(timepicker),?/i);\n            if (newValue === true) {\n              timepicker.show();\n            } else {\n              timepicker.hide();\n            }\n          });\n        }\n\n        // Initialize parser\n        var dateParser = $dateParser({\n          format: options.timeFormat,\n          lang: lang\n        });\n\n        // Observe attributes for changes\n        angular.forEach(['minTime', 'maxTime'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              timepicker.$options[key] = dateParser.getTimeForAttribute(key, newValue);\n              if (!isNaN(timepicker.$options[key])) timepicker.$build();\n              validateAgainstMinMaxTime(controller.$dateValue);\n            });\n          }\n        });\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue, controller.$dateValue);\n          timepicker.update(controller.$dateValue);\n        }, true);\n\n        function validateAgainstMinMaxTime (parsedTime) {\n          if (!angular.isDate(parsedTime)) return;\n          var isMinValid = isNaN(options.minTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) >= options.minTime;\n          var isMaxValid = isNaN(options.maxTime) || new Date(parsedTime.getTime()).setFullYear(1970, 0, 1) <= options.maxTime;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (!isValid) {\n            return;\n          }\n          controller.$dateValue = parsedTime;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            controller.$setValidity('date', true);\n            return null;\n          }\n          var parsedTime = angular.isDate(viewValue) ? viewValue : dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedTime || isNaN(parsedTime.getTime())) {\n            controller.$setValidity('date', false);\n            // Return undefined, causes ngModelController to\n            // invalidate model value\n            return undefined;\n          }\n          validateAgainstMinMaxTime(parsedTime);\n\n          if (options.timeType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedTime, options.timezone, true);\n            return formatDate(date, options.modelTimeFormat || options.timeFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.timeType === 'number') {\n            return date.getTime();\n          } else if (options.timeType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.timeType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.timeType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelTimeFormat);\n          } else if (options.timeType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if(isNaN(date.getTime())) date = new Date(new Date().setMinutes(0) + 36e5);\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getTimeFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getTimeFormattedString());\n        };\n\n        function getTimeFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.timeFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (timepicker) timepicker.destroy();\n          options = null;\n          timepicker = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.tab', [])\n\n  .provider('$tab', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      template: 'tab/tab.tpl.html',\n      navClass: 'nav-tabs',\n      activeClass: 'active'\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'navClass', 'activeClass'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // Publish options on scope\n      $scope.$navClass = self.$options.navClass;\n      $scope.$activeClass = self.$options.activeClass;\n\n      self.$panes = $scope.$panes = [];\n\n      // Please use $activePaneChangeListeners if you use `bsActivePane`\n      // Because we removed `ngModel` as default, we rename viewChangeListeners to\n      // activePaneChangeListeners to make more sense.\n      self.$activePaneChangeListeners = self.$viewChangeListeners = [];\n\n      self.$push = function (pane) {\n        if (angular.isUndefined(self.$panes.$active)) {\n          $scope.$setActive(pane.name || 0);\n        }\n        self.$panes.push(pane);\n      };\n\n      self.$remove = function (pane) {\n        var index = self.$panes.indexOf(pane);\n        var active = self.$panes.$active;\n        var activeIndex;\n        if (angular.isString(active)) {\n          activeIndex = self.$panes.map(function (pane) {\n            return pane.name;\n          }).indexOf(active);\n        } else {\n          activeIndex = self.$panes.$active;\n        }\n\n        // remove pane from $panes array\n        self.$panes.splice(index, 1);\n\n        if (index < activeIndex) {\n          // we removed a pane before the active pane, so we need to\n          // decrement the active pane index\n          activeIndex--;\n        } else if (index === activeIndex && activeIndex === self.$panes.length) {\n          // we remove the active pane and it was the one at the end,\n          // so select the previous one\n          activeIndex--;\n        }\n        if (activeIndex >= 0 && activeIndex < self.$panes.length) {\n          self.$setActive(self.$panes[activeIndex].name || activeIndex);\n        } else {\n          self.$setActive();\n        }\n      };\n\n      self.$setActive = $scope.$setActive = function (value) {\n        self.$panes.$active = value;\n        self.$activePaneChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$isActive = $scope.$isActive = function ($pane, $index) {\n        return self.$panes.$active === $pane.name || self.$panes.$active === $index;\n      };\n\n    };\n\n    this.$get = function () {\n      var $tab = {};\n      $tab.defaults = defaults;\n      $tab.controller = controller;\n      return $tab;\n    };\n\n  })\n\n  .directive('bsTabs', function ($window, $animate, $tab, $parse) {\n\n    var defaults = $tab.defaults;\n\n    return {\n      require: ['?ngModel', 'bsTabs'],\n      transclude: true,\n      scope: true,\n      controller: ['$scope', '$element', '$attrs', $tab.controller],\n      templateUrl: function (element, attr) {\n        return attr.template || defaults.template;\n      },\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // 'ngModel' does interfere with form validation\n        // and status, use `bsActivePane` instead to avoid it\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsTabsCtrl.$panes.$active);\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            bsTabsCtrl.$setActive(modelValue);\n            return modelValue;\n          });\n\n        }\n\n        if (attrs.bsActivePane) {\n          // adapted from angularjs ngModelController bindings\n          // https://github.com/angular/angular.js/blob/v1.3.1/src%2Fng%2Fdirective%2Finput.js#L1730\n          var parsedBsActivePane = $parse(attrs.bsActivePane);\n\n          // Update bsActivePane value with change\n          bsTabsCtrl.$activePaneChangeListeners.push(function () {\n            parsedBsActivePane.assign(scope, bsTabsCtrl.$panes.$active);\n          });\n\n          // watch bsActivePane for value changes\n          scope.$watch(attrs.bsActivePane, function (newValue, oldValue) {\n            bsTabsCtrl.$setActive(newValue);\n          }, true);\n        }\n      }\n    };\n\n  })\n\n  .directive('bsPane', function ($window, $animate, $sce) {\n\n    return {\n      require: ['^?ngModel', '^bsTabs'],\n      scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsTabsCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('tab-pane');\n\n        // Observe title attribute for change\n        attrs.$observe('title', function (newValue, oldValue) {\n          scope.title = $sce.trustAsHtml(newValue);\n        });\n\n        // Save tab name into scope\n        scope.name = attrs.name;\n\n        // Add animation class\n        if (bsTabsCtrl.$options.animation) {\n          element.addClass(bsTabsCtrl.$options.animation);\n        }\n\n        attrs.$observe('disabled', function (newValue, oldValue) {\n          scope.disabled = scope.$eval(newValue);\n        });\n\n        // Push pane to parent bsTabs controller\n        bsTabsCtrl.$push(scope);\n\n        // remove pane from tab controller when pane is destroyed\n        scope.$on('$destroy', function () {\n          bsTabsCtrl.$remove(scope);\n        });\n\n        function render () {\n          var index = bsTabsCtrl.$panes.indexOf(scope);\n          $animate[bsTabsCtrl.$isActive(scope, index) ? 'addClass' : 'removeClass'](element, bsTabsCtrl.$options.activeClass);\n        }\n\n        bsTabsCtrl.$activePaneChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.select', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\n\n  .provider('$select', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'select',\n      prefixEvent: '$select',\n      placement: 'bottom-left',\n      templateUrl: 'select/select.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      multiple: false,\n      allNoneButtons: false,\n      sort: true,\n      caretHtml: '&nbsp;<span class=\"caret\"></span>',\n      placeholder: 'Choose among the following...',\n      allText: 'All',\n      noneText: 'None',\n      maxLength: 3,\n      maxLengthHtml: 'selected',\n      iconCheckmark: 'glyphicon glyphicon-ok',\n      toggle: false\n    };\n\n    this.$get = function ($window, $document, $rootScope, $tooltip, $timeout) {\n\n      // var bodyEl = angular.element($window.document.body);\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n\n      function SelectFactory (element, controller, config) {\n\n        var $select = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $select = $tooltip(element, options);\n        var scope = $select.$scope;\n\n        scope.$matches = [];\n        if (options.multiple) {\n          scope.$activeIndex = [];\n        } else {\n          scope.$activeIndex = -1;\n        }\n        scope.$isMultiple = options.multiple;\n        scope.$showAllNoneButtons = options.allNoneButtons && options.multiple;\n        scope.$iconCheckmark = options.iconCheckmark;\n        scope.$allText = options.allText;\n        scope.$noneText = options.noneText;\n\n        scope.$activate = function (index) {\n          scope.$$postDigest(function () {\n            $select.activate(index);\n          });\n        };\n\n        scope.$select = function (index, evt) {\n          scope.$$postDigest(function () {\n            $select.select(index);\n          });\n        };\n\n        scope.$isVisible = function () {\n          return $select.$isVisible();\n        };\n\n        scope.$isActive = function (index) {\n          return $select.$isActive(index);\n        };\n\n        scope.$selectAll = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (!scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        scope.$selectNone = function () {\n          for (var i = 0; i < scope.$matches.length; i++) {\n            if (scope.$isActive(i)) {\n              scope.$select(i);\n            }\n          }\n        };\n\n        // Public methods\n\n        $select.update = function (matches) {\n          scope.$matches = matches;\n          $select.$updateActiveIndex();\n        };\n\n        $select.activate = function (index) {\n          if (options.multiple) {\n            if ($select.$isActive(index)) {\n              scope.$activeIndex.splice(scope.$activeIndex.indexOf(index), 1);\n            } else {\n              scope.$activeIndex.push(index);\n            }\n            if (options.sort) scope.$activeIndex.sort(function (a, b) { return a - b; }); // use numeric sort instead of default sort\n          } else {\n            scope.$activeIndex = index;\n          }\n          return scope.$activeIndex;\n        };\n\n        $select.select = function (index) {\n          if (angular.isUndefined(index) || index < 0 || index >= scope.$matches.length) { return; }\n          var value = scope.$matches[index].value;\n          scope.$apply(function () {\n            $select.activate(index);\n            if (options.multiple) {\n              controller.$setViewValue(scope.$activeIndex.map(function (index) {\n                if (angular.isUndefined(scope.$matches[index])) {\n                  return null;\n                }\n                return scope.$matches[index].value;\n              }));\n            } else {\n              if (options.toggle) {\n                controller.$setViewValue((value === controller.$modelValue) ? undefined : value);\n              } else {\n                controller.$setViewValue(value);\n              }\n              // Hide if single select\n              $select.hide();\n            }\n          });\n          // Emit event\n          scope.$emit(options.prefixEvent + '.select', value, index, $select);\n          if (angular.isDefined(options.onSelect) && angular.isFunction(options.onSelect)) {\n            options.onSelect(value, index, $select);\n          }\n        };\n\n        // Protected methods\n\n        $select.$updateActiveIndex = function () {\n          if (options.multiple) {\n            if (angular.isArray(controller.$modelValue)) {\n              scope.$activeIndex = controller.$modelValue.map(function (value) {\n                return $select.$getIndex(value);\n              });\n            } else {\n              scope.$activeIndex = [];\n            }\n          } else {\n            if (angular.isDefined(controller.$modelValue) && scope.$matches.length) {\n              scope.$activeIndex = $select.$getIndex(controller.$modelValue);\n            } else {\n              scope.$activeIndex = -1;\n            }\n          }\n        };\n\n        $select.$isVisible = function () {\n          if (!options.minLength || !controller) {\n            return scope.$matches.length;\n          }\n          // minLength support\n          return scope.$matches.length && controller.$viewValue.length >= options.minLength;\n        };\n\n        $select.$isActive = function (index) {\n          if (options.multiple) {\n            return scope.$activeIndex.indexOf(index) !== -1;\n          }\n          return scope.$activeIndex === index;\n        };\n\n        $select.$getIndex = function (value) {\n          var index;\n          for (index = scope.$matches.length; index--;) {\n            if (angular.equals(scope.$matches[index].value, value)) break;\n          }\n          return index;\n        };\n\n        $select.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            var anchor;\n\n            if (evt.target.nodeName !== 'A') {\n              var anchorCandidate = targetEl.parent();\n              while (!anchor && anchorCandidate.length > 0) {\n                if (anchorCandidate[0].nodeName === 'A') {\n                  anchor = anchorCandidate;\n                }\n                anchorCandidate = anchorCandidate.parent();\n              }\n            }\n\n            if (anchor) {\n              angular.element(anchor).triggerHandler('click');\n            } else {\n              targetEl.triggerHandler('click');\n            }\n          }\n        };\n\n        $select.$onKeyDown = function (evt) {\n          if (!/(9|13|38|40)/.test(evt.keyCode)) return;\n          // Let tab propagate\n          if (evt.keyCode !== 9) {\n            evt.preventDefault();\n            evt.stopPropagation();\n          }\n\n          // release focus on tab\n          if (options.multiple && evt.keyCode === 9) {\n            return $select.hide();\n          }\n\n          // Select with enter\n          if (!options.multiple && (evt.keyCode === 13 || evt.keyCode === 9)) {\n            return $select.select(scope.$activeIndex);\n          }\n\n          if (!options.multiple) {\n            // Navigate with keyboard\n            if (evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\n            else if (evt.keyCode === 38 && scope.$activeIndex < 0) scope.$activeIndex = scope.$matches.length - 1;\n            else if (evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\n            else if (angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\n            scope.$digest();\n          }\n        };\n\n        $select.$isIE = function () {\n          var ua = $window.navigator.userAgent;\n          return ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0;\n        };\n\n        $select.$selectScrollFix = function (e) {\n          if ($document[0].activeElement.tagName === 'UL') {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            e.target.focus();\n          }\n        };\n\n        // Overrides\n\n        var _show = $select.show;\n        $select.show = function () {\n          _show();\n          if (options.multiple) {\n            $select.$element.addClass('select-multiple');\n          }\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            $select.$element.on(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $select.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $select.hide;\n        $select.hide = function () {\n          var selectElement = $select.$element;\n          if(!$select.$isShown) return;\n          hide();\n          if($select.$isShown) return; // support preventing hide\n          if (!options.multiple && angular.isUndefined(controller.$modelValue)) {\n            scope.$activeIndex = -1;\n          }\n          selectElement.off(isTouch ? 'touchstart' : 'mousedown', $select.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $select.$onKeyDown);\n          }\n        };\n\n        return $select;\n\n      }\n\n      SelectFactory.defaults = defaults;\n      return SelectFactory;\n\n    };\n\n  })\n\n  .directive('bsSelect', function ($window, $parse, $q, $select, $parseOptions) {\n\n    var defaults = $select.defaults;\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope, placeholder: defaults.placeholder};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'placeholder', 'allNoneButtons', 'maxLength', 'maxLengthHtml', 'allText', 'noneText', 'iconCheckmark', 'autoClose', 'id', 'sort', 'caretHtml', 'prefixClass', 'prefixEvent', 'toggle'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'allNoneButtons', 'sort'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show, hide and select events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide', 'onSelect'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Only parse data-multiple. Angular sets existence attributes to true (multiple/required/etc), they apply this\n        // to data-multiple as well for some reason, so we'll parse this ourselves and disregard multiple\n        var dataMultiple = element.attr('data-multiple');\n        if (angular.isDefined(dataMultiple)) {\n          if (falseValueRegExp.test(dataMultiple)) {\n            options.multiple = false;\n          } else {\n            options.multiple = dataMultiple;\n          }\n        }\n\n        // Add support for select markup\n        if (element[0].nodeName.toLowerCase() === 'select') {\n          var inputEl = element;\n          inputEl.css('display', 'none');\n          element = angular.element('<button type=\"button\" class=\"btn btn-default\"></button>');\n          inputEl.after(element);\n        }\n\n        // Build proper bsOptions\n        var parsedOptions = $parseOptions(attr.bsOptions);\n\n        // Initialize select\n        var select = $select(element, controller, options);\n\n        if (select.$isIE()) {\n          element[0].addEventListener('blur', select.$selectScrollFix);\n        }\n\n        // Watch bsOptions values before filtering for changes\n        var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').trim();\n        scope.$watch(watchedOptions, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\n          parsedOptions.valuesFn(scope, controller)\n          .then(function (values) {\n            select.update(values);\n            controller.$render();\n          });\n        }, true);\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          // console.warn('scope.$watch(%s)', attr.ngModel, newValue, oldValue);\n          select.$updateActiveIndex();\n          controller.$render();\n        }, true);\n\n        // Model rendering in view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var selected;\n          var index;\n          if (options.multiple && angular.isArray(controller.$modelValue)) {\n            selected = controller.$modelValue.map(function (value) {\n              index = select.$getIndex(value);\n              return index !== -1 ? select.$scope.$matches[index].label : false;\n            }).filter(angular.isDefined);\n            if (selected.length > (options.maxLength || defaults.maxLength)) {\n              selected = selected.length + ' ' + (options.maxLengthHtml || defaults.maxLengthHtml);\n            } else {\n              selected = selected.join(', ');\n            }\n          } else {\n            index = select.$getIndex(controller.$modelValue);\n            selected = index !== -1 ? select.$scope.$matches[index].label : false;\n          }\n          element.html((selected || options.placeholder) + (options.caretHtml || defaults.caretHtml));\n        };\n\n        if (options.multiple) {\n          controller.$isEmpty = function (value) {\n            return !value || value.length === 0;\n          };\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (select) select.destroy();\n          options = null;\n          select = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.scrollspy', ['mgcrea.ngStrap.helpers.debounce', 'mgcrea.ngStrap.helpers.dimensions'])\n\n  .provider('$scrollspy', function () {\n\n    // Pool of registered spies\n    var spies = this.$$spies = {};\n\n    var defaults = this.defaults = {\n      debounce: 150,\n      throttle: 100,\n      offset: 100\n    };\n\n    this.$get = function ($window, $document, $rootScope, dimensions, debounce, throttle) {\n\n      var windowEl = angular.element($window);\n      var docEl = angular.element($document.prop('documentElement'));\n      var bodyEl = angular.element($window.document.body);\n\n      // Helper functions\n\n      function nodeName (element, name) {\n        return element[0].nodeName && element[0].nodeName.toLowerCase() === name.toLowerCase();\n      }\n\n      function ScrollSpyFactory (config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        if (!options.element) options.element = bodyEl;\n        var isWindowSpy = nodeName(options.element, 'body');\n        var scrollEl = isWindowSpy ? windowEl : options.element;\n        var scrollId = isWindowSpy ? 'window' : options.id;\n\n        // Use existing spy\n        if (spies[scrollId]) {\n          spies[scrollId].$$count++;\n          return spies[scrollId];\n        }\n\n        var $scrollspy = {};\n\n        // Private vars\n        var unbindViewContentLoaded;\n        var unbindIncludeContentLoaded;\n        var trackedElements = $scrollspy.$trackedElements = [];\n        var sortedElements = [];\n        var activeTarget;\n        var debouncedCheckPosition;\n        var throttledCheckPosition;\n        var debouncedCheckOffsets;\n        /* eslint-disable no-unused-vars */\n        var viewportHeight;\n        /* eslint-enable no-unused-vars */\n        var scrollTop;\n\n        $scrollspy.init = function () {\n\n          // Setup internal ref counter\n          this.$$count = 1;\n\n          // Bind events\n          debouncedCheckPosition = debounce(this.checkPosition, options.debounce);\n          throttledCheckPosition = throttle(this.checkPosition, options.throttle);\n          scrollEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', debouncedCheckPosition);\n          scrollEl.on('scroll', throttledCheckPosition);\n\n          debouncedCheckOffsets = debounce(this.checkOffsets, options.debounce);\n          unbindViewContentLoaded = $rootScope.$on('$viewContentLoaded', debouncedCheckOffsets);\n          unbindIncludeContentLoaded = $rootScope.$on('$includeContentLoaded', debouncedCheckOffsets);\n          debouncedCheckOffsets();\n\n          // Register spy for reuse\n          if (scrollId) {\n            spies[scrollId] = $scrollspy;\n          }\n\n        };\n\n        $scrollspy.destroy = function () {\n\n          // Check internal ref counter\n          this.$$count--;\n          if (this.$$count > 0) {\n            return;\n          }\n\n          // Unbind events\n          scrollEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', debouncedCheckPosition);\n          scrollEl.off('scroll', throttledCheckPosition);\n          unbindViewContentLoaded();\n          unbindIncludeContentLoaded();\n          if (scrollId) {\n            delete spies[scrollId];\n          }\n        };\n\n        $scrollspy.checkPosition = function () {\n\n          // Not ready yet\n          if (!sortedElements.length) return;\n\n          // Calculate the scroll position\n          scrollTop = (isWindowSpy ? $window.pageYOffset : scrollEl.prop('scrollTop')) || 0;\n\n          // Calculate the viewport height for use by the components\n          viewportHeight = Math.max($window.innerHeight, docEl.prop('clientHeight'));\n\n          // Activate first element if scroll is smaller\n          if (scrollTop < sortedElements[0].offsetTop && activeTarget !== sortedElements[0].target) {\n            return $scrollspy.$activateElement(sortedElements[0]);\n          }\n\n          // Activate proper element\n          for (var i = sortedElements.length; i--;) {\n            if (angular.isUndefined(sortedElements[i].offsetTop) || sortedElements[i].offsetTop === null) continue;\n            if (activeTarget === sortedElements[i].target) continue;\n            if (scrollTop < sortedElements[i].offsetTop) continue;\n            if (sortedElements[i + 1] && scrollTop > sortedElements[i + 1].offsetTop) continue;\n            return $scrollspy.$activateElement(sortedElements[i]);\n          }\n\n        };\n\n        $scrollspy.checkPositionWithEventLoop = function () {\n          // IE 9 throws an error if we use 'this' instead of '$scrollspy'\n          // in this setTimeout call\n          setTimeout($scrollspy.checkPosition, 1);\n        };\n\n        // Protected methods\n\n        $scrollspy.$activateElement = function (element) {\n          if (activeTarget) {\n            var activeElement = $scrollspy.$getTrackedElement(activeTarget);\n            if (activeElement) {\n              activeElement.source.removeClass('active');\n              if (nodeName(activeElement.source, 'li') && nodeName(activeElement.source.parent().parent(), 'li')) {\n                activeElement.source.parent().parent().removeClass('active');\n              }\n            }\n          }\n          activeTarget = element.target;\n          element.source.addClass('active');\n          if (nodeName(element.source, 'li') && nodeName(element.source.parent().parent(), 'li')) {\n            element.source.parent().parent().addClass('active');\n          }\n        };\n\n        $scrollspy.$getTrackedElement = function (target) {\n          return trackedElements.filter(function (obj) {\n            return obj.target === target;\n          })[0];\n        };\n\n        // Track offsets behavior\n\n        $scrollspy.checkOffsets = function () {\n\n          angular.forEach(trackedElements, function (trackedElement) {\n            var targetElement = document.querySelector(trackedElement.target);\n            trackedElement.offsetTop = targetElement ? dimensions.offset(targetElement).top : null;\n            if (options.offset && trackedElement.offsetTop !== null) trackedElement.offsetTop -= options.offset * 1;\n          });\n\n          sortedElements = trackedElements\n          .filter(function (el) {\n            return el.offsetTop !== null;\n          })\n          .sort(function (a, b) {\n            return a.offsetTop - b.offsetTop;\n          });\n\n          debouncedCheckPosition();\n\n        };\n\n        $scrollspy.trackElement = function (target, source) {\n          trackedElements.push({target: target, source: source});\n        };\n\n        $scrollspy.untrackElement = function (target, source) {\n          var toDelete;\n          for (var i = trackedElements.length; i--;) {\n            if (trackedElements[i].target === target && trackedElements[i].source === source) {\n              toDelete = i;\n              break;\n            }\n          }\n          trackedElements.splice(toDelete, 1);\n        };\n\n        $scrollspy.activate = function (i) {\n          trackedElements[i].addClass('active');\n        };\n\n        // Initialize plugin\n\n        $scrollspy.init();\n        return $scrollspy;\n\n      }\n\n      return ScrollSpyFactory;\n\n    };\n\n  })\n\n  .directive('bsScrollspy', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'EAC',\n      link: function postLink (scope, element, attr) {\n\n        var options = {scope: scope};\n        angular.forEach(['offset', 'target'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        var scrollspy = $scrollspy(options);\n        scrollspy.trackElement(options.target, element);\n\n        scope.$on('$destroy', function () {\n          if (scrollspy) {\n            scrollspy.untrackElement(options.target, element);\n            scrollspy.destroy();\n          }\n          options = null;\n          scrollspy = null;\n        });\n\n      }\n    };\n\n  })\n\n\n  .directive('bsScrollspyList', function ($rootScope, debounce, dimensions, $scrollspy) {\n\n    return {\n      restrict: 'A',\n      compile: function postLink (element, attr) {\n        var children = element[0].querySelectorAll('li > a[href]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.parent().attr('bs-scrollspy', '').attr('data-target', childEl.attr('href'));\n        });\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.progressbar', [])\n.provider('$progressbar', function (){\n    var defaults = {\n      type: '',\n      animate: true\n    };\n\n    this.$get = function (){\n      return {\n        defaults: defaults\n      };\n    };\n  })\n  .directive('bsProgressbar', function ($progressbar){\n    return {\n      restrict: 'E',\n      transclude: true,\n      replace: true,\n      templateUrl: 'progressbar/progressbar.tpl.html',\n      scope:{\n        value: '=',\n        type: '@',\n        animate: '=?'\n      },\n      link: function (scope, element, attr){\n        scope.type = scope.type || $progressbar.defaults.type;\n        scope.animate = angular.isDefined(scope.animate) ? scope.animate : $progressbar.defaults.animate;\n      }\n    };\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.popover', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$popover', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      customClass: '',\n      // uncommenting the next two lines will break backwards compatability\n      // prefixClass: 'popover',\n      // prefixEvent: 'popover',\n      container: false,\n      target: false,\n      placement: 'right',\n      templateUrl: 'popover/popover.tpl.html',\n      contentTemplate: false,\n      trigger: 'click',\n      keyboard: true,\n      html: false,\n      title: '',\n      content: '',\n      delay: 0,\n      autoClose: false\n    };\n\n    this.$get = function ($tooltip) {\n\n      function PopoverFactory (element, config) {\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        var $popover = $tooltip(element, options);\n\n        // Support scope as string options [/*title, */content]\n        if (options.content) {\n          $popover.$scope.content = options.content;\n        }\n\n        return $popover;\n\n      }\n\n      return PopoverFactory;\n\n    };\n\n  })\n\n  .directive('bsPopover', function ($window, $sce, $popover) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame || $window.setTimeout;\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr) {\n\n        var popover;\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'customClass', 'autoClose', 'id', 'prefixClass', 'prefixEvent', 'bsEnabled'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoClose'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // should not parse target attribute (anchor tag), only data-target #1454\n        var dataTarget = element.attr('data-target');\n        if (angular.isDefined(dataTarget)) {\n          if (falseValueRegExp.test(dataTarget)) {\n            options.target = false;\n          } else {\n            options.target = dataTarget;\n          }\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n              if (angular.isDefined(oldValue)) {\n                requestAnimationFrame(function () {\n                  if (popover) popover.$applyPlacement();\n                });\n              }\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsPopover) {\n          scope.$watch(attr.bsPopover, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n            if (angular.isDefined(oldValue)) {\n              requestAnimationFrame(function () {\n                if (popover) popover.$applyPlacement();\n              });\n            }\n          }, true);\n        }\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(popover),?/i);\n            if (newValue === true) {\n              popover.show();\n            } else {\n              popover.hide();\n            }\n          });\n        }\n\n        // Enabled binding support\n        if (attr.bsEnabled) {\n          scope.$watch(attr.bsEnabled, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|1|,?(popover),?/i);\n            if (newValue === false) {\n              popover.setEnabled(false);\n            } else {\n              popover.setEnabled(true);\n            }\n          });\n        }\n\n        // Viewport support\n        if (attr.viewport) {\n          scope.$watch(attr.viewport, function (newValue) {\n            if (!popover || !angular.isDefined(newValue)) return;\n            popover.setViewport(newValue);\n          });\n        }\n\n        // Initialize popover\n        popover = $popover(element, options);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (popover) popover.destroy();\n          options = null;\n          popover = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.navbar', [])\n\n  .provider('$navbar', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      routeAttr: 'data-match-route',\n      strict: false\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsNavbar', function ($window, $location, $navbar) {\n\n    var defaults = $navbar.defaults;\n\n    return {\n      restrict: 'A',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = angular.copy(defaults);\n        angular.forEach(Object.keys(defaults), function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // Watch for the $location\n        scope.$watch(function () {\n\n          return $location.path();\n\n        }, function (newValue, oldValue) {\n\n          var liElements = element[0].querySelectorAll('li[' + options.routeAttr + ']');\n\n          angular.forEach(liElements, function (li) {\n\n            var liElement = angular.element(li);\n            var pattern = liElement.attr(options.routeAttr).replace('/', '\\\\/');\n            if (options.strict) {\n              pattern = '^' + pattern + '$';\n            }\n            var regexp = new RegExp(pattern, 'i');\n\n            if (regexp.test(newValue)) {\n              liElement.addClass(options.activeClass);\n            } else {\n              liElement.removeClass(options.activeClass);\n            }\n\n          });\n\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nif (angular.version.minor < 3 && angular.version.dot < 14) {\n  angular.module('ng')\n\n  .factory('$$rAF', function ($window, $timeout) {\n\n    var requestAnimationFrame = $window.requestAnimationFrame ||\n                                $window.webkitRequestAnimationFrame ||\n                                $window.mozRequestAnimationFrame;\n\n    var cancelAnimationFrame = $window.cancelAnimationFrame ||\n                               $window.webkitCancelAnimationFrame ||\n                               $window.mozCancelAnimationFrame ||\n                               $window.webkitCancelRequestAnimationFrame;\n\n    var rafSupported = !!requestAnimationFrame;\n    var raf = rafSupported ?\n      function (fn) {\n        var id = requestAnimationFrame(fn);\n        return function () {\n          cancelAnimationFrame(id);\n        };\n      } :\n      function (fn) {\n        var timer = $timeout(fn, 16.66, false); // 1000 / 60 = 16.666\n        return function () {\n          $timeout.cancel(timer);\n        };\n      };\n\n    raf.supported = rafSupported;\n\n    return raf;\n\n  });\n}\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.parseOptions', [])\n\n  .provider('$parseOptions', function () {\n\n    var defaults = this.defaults = {\n      regexp: /^\\s*(.*?)(?:\\s+as\\s+(.*?))?(?:\\s+group\\s+by\\s+(.*))?\\s+for\\s+(?:([\\$\\w][\\$\\w]*)|(?:\\(\\s*([\\$\\w][\\$\\w]*)\\s*,\\s*([\\$\\w][\\$\\w]*)\\s*\\)))\\s+in\\s+(.*?)(?:\\s+track\\s+by\\s+(.*?))?$/\n    };\n\n    this.$get = function ($parse, $q) {\n\n      function ParseOptionsFactory (attr, config) {\n\n        var $parseOptions = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        $parseOptions.$values = [];\n\n        // Private vars\n        var match;\n        var displayFn;\n        var valueName;\n        /* eslint-disable no-unused-vars */\n        var keyName;\n        var groupByFn;\n        /* eslint-enable no-unused-vars */\n        var valueFn;\n        var valuesFn;\n\n        $parseOptions.init = function () {\n          $parseOptions.$match = match = attr.match(options.regexp);\n          displayFn = $parse(match[2] || match[1]);\n          valueName = match[4] || match[6];\n          keyName = match[5];\n          groupByFn = $parse(match[3] || '');\n          valueFn = $parse(match[2] ? match[1] : valueName);\n          valuesFn = $parse(match[7]);\n        };\n\n        $parseOptions.valuesFn = function (scope, controller) {\n          return $q.when(valuesFn(scope, controller))\n          .then(function (values) {\n            if (!angular.isArray(values)) {\n              values = [];\n            }\n            $parseOptions.$values = values.length ? parseValues(values, scope) : [];\n            return $parseOptions.$values;\n          });\n        };\n\n        $parseOptions.displayValue = function (modelValue) {\n          var scope = {};\n          scope[valueName] = modelValue;\n          return displayFn(scope);\n        };\n\n        // Private functions\n\n        function parseValues (values, scope) {\n          return values.map(function (match, index) {\n            var locals = {};\n            var label;\n            var value;\n            locals[valueName] = match;\n            label = displayFn(scope, locals);\n            value = valueFn(scope, locals);\n            return {label: label, value: value, index: index};\n          });\n        }\n\n        $parseOptions.init();\n        return $parseOptions;\n\n      }\n\n      return ParseOptionsFactory;\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dimensions', [])\n\n  .factory('dimensions', function () {\n\n    var fn = {};\n\n    /**\n     * Test the element nodeName\n     * @param element\n     * @param name\n     */\n    var nodeName = fn.nodeName = function (element, name) {\n      return element.nodeName && element.nodeName.toLowerCase() === name.toLowerCase();\n    };\n\n    /**\n     * Returns the element computed style\n     * @param element\n     * @param prop\n     * @param extra\n     */\n    fn.css = function (element, prop, extra) {\n      var value;\n      if (element.currentStyle) { // IE\n        value = element.currentStyle[prop];\n      } else if (window.getComputedStyle) {\n        value = window.getComputedStyle(element)[prop];\n      } else {\n        value = element.style[prop];\n      }\n      return extra === true ? parseFloat(value) || 0 : value;\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.offset = function (element) {\n      var boxRect = element.getBoundingClientRect();\n      var docElement = element.ownerDocument;\n      return {\n        width: boxRect.width || element.offsetWidth,\n        height: boxRect.height || element.offsetHeight,\n        top: boxRect.top + (window.pageYOffset || docElement.documentElement.scrollTop) - (docElement.documentElement.clientTop || 0),\n        left: boxRect.left + (window.pageXOffset || docElement.documentElement.scrollLeft) - (docElement.documentElement.clientLeft || 0)\n      };\n    };\n\n    /**\n     * Provides set equivalent of jQuery's offset function:\n     * @required-by bootstrap-tooltip\n     * @url http://api.jquery.com/offset/\n     * @param element\n     * @param options\n     * @param i\n     */\n    fn.setOffset = function (element, options, i) {\n      var curPosition;\n      var curLeft;\n      var curCSSTop;\n      var curTop;\n      var curOffset;\n      var curCSSLeft;\n      var calculatePosition;\n      var position = fn.css(element, 'position');\n      var curElem = angular.element(element);\n      var props = {};\n\n      // Set position first, in-case top/left are set even on static elem\n      if (position === 'static') {\n        element.style.position = 'relative';\n      }\n\n      curOffset = fn.offset(element);\n      curCSSTop = fn.css(element, 'top');\n      curCSSLeft = fn.css(element, 'left');\n      calculatePosition = (position === 'absolute' || position === 'fixed') &&\n                          (curCSSTop + curCSSLeft).indexOf('auto') > -1;\n\n      // Need to be able to calculate position if either\n      // top or left is auto and position is either absolute or fixed\n      if (calculatePosition) {\n        curPosition = fn.position(element);\n        curTop = curPosition.top;\n        curLeft = curPosition.left;\n      } else {\n        curTop = parseFloat(curCSSTop) || 0;\n        curLeft = parseFloat(curCSSLeft) || 0;\n      }\n\n      if (angular.isFunction(options)) {\n        options = options.call(element, i, curOffset);\n      }\n\n      if (options.top !== null) {\n        props.top = (options.top - curOffset.top) + curTop;\n      }\n      if (options.left !== null) {\n        props.left = (options.left - curOffset.left) + curLeft;\n      }\n\n      if ('using' in options) {\n        options.using.call(curElem, props);\n      } else {\n        curElem.css({\n          top: props.top + 'px',\n          left: props.left + 'px'\n        });\n      }\n    };\n\n    /**\n     * Provides read-only equivalent of jQuery's position function\n     * @required-by bootstrap-tooltip, bootstrap-affix\n     * @url http://api.jquery.com/offset/\n     * @param element\n     */\n    fn.position = function (element) {\n\n      var offsetParentRect = {top: 0, left: 0};\n      var offsetParentEl;\n      var offset;\n\n      // Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is it's only offset parent\n      if (fn.css(element, 'position') === 'fixed') {\n\n        // We assume that getBoundingClientRect is available when computed position is fixed\n        offset = element.getBoundingClientRect();\n\n      } else {\n\n        // Get *real* offsetParentEl\n        offsetParentEl = offsetParentElement(element);\n\n        // Get correct offsets\n        offset = fn.offset(element);\n        if (!nodeName(offsetParentEl, 'html')) {\n          offsetParentRect = fn.offset(offsetParentEl);\n        }\n\n        // Add offsetParent borders\n        offsetParentRect.top += fn.css(offsetParentEl, 'borderTopWidth', true);\n        offsetParentRect.left += fn.css(offsetParentEl, 'borderLeftWidth', true);\n      }\n\n      // Subtract parent offsets and element margins\n      return {\n        width: element.offsetWidth,\n        height: element.offsetHeight,\n        top: offset.top - offsetParentRect.top - fn.css(element, 'marginTop', true),\n        left: offset.left - offsetParentRect.left - fn.css(element, 'marginLeft', true)\n      };\n\n    };\n\n    /**\n     * Returns the closest, non-statically positioned offsetParent of a given element\n     * @required-by fn.position\n     * @param element\n     */\n    function offsetParentElement (element) {\n      var docElement = element.ownerDocument;\n      var offsetParent = element.offsetParent || docElement;\n      if (nodeName(offsetParent, '#document')) return docElement.documentElement;\n      while (offsetParent && !nodeName(offsetParent, 'html') && fn.css(offsetParent, 'position') === 'static') {\n        offsetParent = offsetParent.offsetParent;\n      }\n      return offsetParent || docElement.documentElement;\n    }\n\n    /**\n     * Provides equivalent of jQuery's height function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/height/\n     * @param element\n     * @param outer\n     */\n    fn.height = function (element, outer) {\n      var value = element.offsetHeight;\n      if (outer) {\n        value += fn.css(element, 'marginTop', true) + fn.css(element, 'marginBottom', true);\n      } else {\n        value -= fn.css(element, 'paddingTop', true) + fn.css(element, 'paddingBottom', true) + fn.css(element, 'borderTopWidth', true) + fn.css(element, 'borderBottomWidth', true);\n      }\n      return value;\n    };\n\n    /**\n     * Provides equivalent of jQuery's width function\n     * @required-by bootstrap-affix\n     * @url http://api.jquery.com/width/\n     * @param element\n     * @param outer\n     */\n    fn.width = function (element, outer) {\n      var value = element.offsetWidth;\n      if (outer) {\n        value += fn.css(element, 'marginLeft', true) + fn.css(element, 'marginRight', true);\n      } else {\n        value -= fn.css(element, 'paddingLeft', true) + fn.css(element, 'paddingRight', true) + fn.css(element, 'borderLeftWidth', true) + fn.css(element, 'borderRightWidth', true);\n      }\n      return value;\n    };\n\n    return fn;\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.debounce', [])\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L693\n.factory('debounce', function ($timeout) {\n  return function (func, wait, immediate) {\n    var timeout = null;\n    return function () {\n      var context = this;\n      var args = arguments;\n      var callNow = immediate && !timeout;\n      if (timeout) {\n        $timeout.cancel(timeout);\n      }\n      timeout = $timeout(function later () {\n        timeout = null;\n        if (!immediate) {\n          func.apply(context, args);\n        }\n      }, wait, false);\n      if (callNow) {\n        func.apply(context, args);\n      }\n      return timeout;\n    };\n  };\n})\n\n\n// @source jashkenas/underscore\n// @url https://github.com/jashkenas/underscore/blob/1.5.2/underscore.js#L661\n.factory('throttle', function ($timeout) {\n  return function (func, wait, options) {\n    var timeout = null;\n    if (!options) options = {};\n    return function () {\n      var context = this;\n      var args = arguments;\n      if (!timeout) {\n        if (options.leading !== false) {\n          func.apply(context, args);\n        }\n        timeout = $timeout(function later () {\n          timeout = null;\n          if (options.trailing !== false) {\n            func.apply(context, args);\n          }\n        }, wait, false);\n      }\n    };\n  };\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateParser', [])\n\n.provider('$dateParser', function ($localeProvider) {\n\n  // define a custom ParseDate object to use instead of native Date\n  // to avoid date values wrapping when setting date component values\n  function ParseDate () {\n    this.year = 1970;\n    this.month = 0;\n    this.day = 1;\n    this.hours = 0;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.milliseconds = 0;\n  }\n\n  ParseDate.prototype.setMilliseconds = function (value) { this.milliseconds = value; };\n  ParseDate.prototype.setSeconds = function (value) { this.seconds = value; };\n  ParseDate.prototype.setMinutes = function (value) { this.minutes = value; };\n  ParseDate.prototype.setHours = function (value) { this.hours = value; };\n  ParseDate.prototype.getHours = function () { return this.hours; };\n  ParseDate.prototype.setDate = function (value) { this.day = value; };\n  ParseDate.prototype.setMonth = function (value) { this.month = value; };\n  ParseDate.prototype.setFullYear = function (value) { this.year = value; };\n  ParseDate.prototype.fromDate = function (value) {\n    this.year = value.getFullYear();\n    this.month = value.getMonth();\n    this.day = value.getDate();\n    this.hours = value.getHours();\n    this.minutes = value.getMinutes();\n    this.seconds = value.getSeconds();\n    this.milliseconds = value.getMilliseconds();\n    return this;\n  };\n\n  ParseDate.prototype.toDate = function () {\n    return new Date(this.year, this.month, this.day, this.hours, this.minutes, this.seconds, this.milliseconds);\n  };\n\n  var proto = ParseDate.prototype;\n\n  function noop () {\n  }\n\n  function isNumeric (n) {\n    return !isNaN(parseFloat(n)) && isFinite(n);\n  }\n\n  function indexOfCaseInsensitive (array, value) {\n    var len = array.length;\n    var str = value.toString().toLowerCase();\n    for (var i = 0; i < len; i++) {\n      if (array[i].toLowerCase() === str) { return i; }\n    }\n    return -1; // Return -1 per the \"Array.indexOf()\" method.\n  }\n\n  var defaults = this.defaults = {\n    format: 'shortDate',\n    strict: false\n  };\n\n  this.$get = function ($locale, dateFilter) {\n\n    var DateParserFactory = function (config) {\n\n      var options = angular.extend({}, defaults, config);\n\n      var $dateParser = {};\n\n      /* eslint-disable key-spacing, quote-props */\n      var regExpMap = {\n        'sss'   : '[0-9]{3}',\n        'ss'    : '[0-5][0-9]',\n        's'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'mm'    : '[0-5][0-9]',\n        'm'     : options.strict ? '[1-5]?[0-9]' : '[0-9]|[0-5][0-9]',\n        'HH'    : '[01][0-9]|2[0-3]',\n        'H'     : options.strict ? '1?[0-9]|2[0-3]' : '[01]?[0-9]|2[0-3]',\n        'hh'    : '[0][1-9]|[1][012]',\n        'h'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'a'     : 'AM|PM',\n        'EEEE'  : $locale.DATETIME_FORMATS.DAY.join('|'),\n        'EEE'   : $locale.DATETIME_FORMATS.SHORTDAY.join('|'),\n        'dd'    : '0[1-9]|[12][0-9]|3[01]',\n        'd'     : options.strict ? '[1-9]|[1-2][0-9]|3[01]' : '0?[1-9]|[1-2][0-9]|3[01]',\n        'MMMM'  : $locale.DATETIME_FORMATS.MONTH.join('|'),\n        'MMM'   : $locale.DATETIME_FORMATS.SHORTMONTH.join('|'),\n        'MM'    : '0[1-9]|1[012]',\n        'M'     : options.strict ? '[1-9]|1[012]' : '0?[1-9]|1[012]',\n        'yyyy'  : '[1]{1}[0-9]{3}|[2]{1}[0-9]{3}',\n        'yy'    : '[0-9]{2}',\n        'y'     : options.strict ? '-?(0|[1-9][0-9]{0,3})' : '-?0*[0-9]{1,4}'\n      };\n\n      var setFnMap = {\n        'sss'   : proto.setMilliseconds,\n        'ss'    : proto.setSeconds,\n        's'     : proto.setSeconds,\n        'mm'    : proto.setMinutes,\n        'm'     : proto.setMinutes,\n        'HH'    : proto.setHours,\n        'H'     : proto.setHours,\n        'hh'    : proto.setHours,\n        'h'     : proto.setHours,\n        'EEEE'  : noop,\n        'EEE'   : noop,\n        'dd'    : proto.setDate,\n        'd'     : proto.setDate,\n        'a'     : function (value) { var hours = this.getHours() % 12; return this.setHours(value.match(/pm/i) ? hours + 12 : hours); },\n        'MMMM'  : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.MONTH, value)); },\n        'MMM'   : function (value) { return this.setMonth(indexOfCaseInsensitive($locale.DATETIME_FORMATS.SHORTMONTH, value)); },\n        'MM'    : function (value) { return this.setMonth(1 * value - 1); },\n        'M'     : function (value) { return this.setMonth(1 * value - 1); },\n        'yyyy'  : proto.setFullYear,\n        'yy'    : function (value) { return this.setFullYear(2000 + 1 * value); },\n        'y'     : function (value) { return (1 * value <= 50 && value.length === 2) ? this.setFullYear(2000 + 1 * value) : this.setFullYear(1 * value); }\n      };\n      /* eslint-enable key-spacing, quote-props */\n\n      var regex;\n      var setMap;\n\n      $dateParser.init = function () {\n        $dateParser.$format = $locale.DATETIME_FORMATS[options.format] || options.format;\n        regex = regExpForFormat($dateParser.$format);\n        setMap = setMapForFormat($dateParser.$format);\n      };\n\n      $dateParser.isValid = function (date) {\n        if (angular.isDate(date)) return !isNaN(date.getTime());\n        return regex.test(date);\n      };\n\n      $dateParser.parse = function (value, baseDate, format, timezone) {\n        // check for date format special names\n        if (format) format = $locale.DATETIME_FORMATS[format] || format;\n        if (angular.isDate(value)) value = dateFilter(value, format || $dateParser.$format, timezone);\n        var formatRegex = format ? regExpForFormat(format) : regex;\n        var formatSetMap = format ? setMapForFormat(format) : setMap;\n        var matches = formatRegex.exec(value);\n        if (!matches) return false;\n        // use custom ParseDate object to set parsed values\n        var date = baseDate && !isNaN(baseDate.getTime()) ? new ParseDate().fromDate(baseDate) : new ParseDate().fromDate(new Date(1970, 0, 1, 0));\n        for (var i = 0; i < matches.length - 1; i++) {\n          if (formatSetMap[i]) formatSetMap[i].call(date, matches[i + 1]);\n        }\n        // convert back to native Date object\n        var newDate = date.toDate();\n\n        // check new native Date object for day values overflow\n        if (parseInt(date.day, 10) !== newDate.getDate()) {\n          return false;\n        }\n\n        return newDate;\n      };\n\n      $dateParser.getDateForAttribute = function (key, value) {\n        var date;\n\n        if (value === 'today') {\n          var today = new Date();\n          date = new Date(today.getFullYear(), today.getMonth(), today.getDate() + (key === 'maxDate' ? 1 : 0), 0, 0, 0, (key === 'minDate' ? 0 : -1));\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) { // Support {{ dateObj }}\n          date = new Date(value.substr(1, value.length - 2));\n        } else if (isNumeric(value)) {\n          date = new Date(parseInt(value, 10));\n        } else if (angular.isString(value) && value.length === 0) { // Reset date\n          date = key === 'minDate' ? -Infinity : +Infinity;\n        } else {\n          date = new Date(value);\n        }\n\n        return date;\n      };\n\n      $dateParser.getTimeForAttribute = function (key, value) {\n        var time;\n\n        if (value === 'now') {\n          time = new Date().setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.match(/^\".+\"$/)) {\n          time = new Date(value.substr(1, value.length - 2)).setFullYear(1970, 0, 1);\n        } else if (isNumeric(value)) {\n          time = new Date(parseInt(value, 10)).setFullYear(1970, 0, 1);\n        } else if (angular.isString(value) && value.length === 0) { // Reset time\n          time = key === 'minTime' ? -Infinity : +Infinity;\n        } else {\n          time = $dateParser.parse(value, new Date(1970, 0, 1, 0));\n        }\n\n        return time;\n      };\n\n      /* Handle switch to/from daylight saving.\n      * Hours may be non-zero on daylight saving cut-over:\n      * > 12 when midnight changeover, but then cannot generate\n      * midnight datetime, so jump to 1AM, otherwise reset.\n      * @param  date  (Date) the date to check\n      * @return  (Date) the corrected date\n      *\n      * __ copied from jquery ui datepicker __\n      */\n      $dateParser.daylightSavingAdjust = function (date) {\n        if (!date) {\n          return null;\n        }\n        date.setHours(date.getHours() > 12 ? date.getHours() + 2 : 0);\n        return date;\n      };\n\n      /* Correct the date for timezone offset.\n      * @param  date  (Date) the date to adjust\n      * @param  timezone  (string) the timezone to adjust for\n      * @param  undo  (boolean) to add or subtract timezone offset\n      * @return  (Date) the corrected date\n      */\n      $dateParser.timezoneOffsetAdjust = function (date, timezone, undo) {\n        if (!date) {\n          return null;\n        }\n        // Right now, only 'UTC' is supported.\n        if (timezone && timezone === 'UTC') {\n          date = new Date(date.getTime());\n          date.setMinutes(date.getMinutes() + (undo ? -1 : 1) * date.getTimezoneOffset());\n        }\n        return date;\n      };\n\n      // Private functions\n\n      function regExpForFormat (format) {\n        // `format` string can contain literal values.\n        // These need to be escaped by surrounding with\n        // single quotes (e.g. `\"h 'in the morning'\"`).\n        // In order to output a single quote, escape it - i.e.,\n        // two single quotes in a sequence (e.g. `\"h 'o''clock'\"`).\n\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseRegex(re);\n      }\n\n      function buildDateAbstractRegex (format) {\n        var escapedFormat = escapeReservedSymbols(format);\n        var escapedLiteralFormat = escapedFormat.replace(/''/g, '\\\\\\'');\n        var literalRegex = /('(?:\\\\'|.)*?')/;\n        var formatParts = escapedLiteralFormat.split(literalRegex);\n        var dateElements = Object.keys(regExpMap);\n        var dateRegexParts = [];\n\n        angular.forEach(formatParts, function (part) {\n          if (isFormatStringLiteral(part)) {\n            part = trimLiteralEscapeChars(part);\n          } else {\n            // Abstract replaces to avoid collisions\n            for (var i = 0; i < dateElements.length; i++) {\n              part = part.split(dateElements[i]).join('${' + i + '}');\n            }\n          }\n          dateRegexParts.push(part);\n        });\n\n        return dateRegexParts.join('');\n      }\n\n      function escapeReservedSymbols (text) {\n        return text.replace(/\\\\/g, '[\\\\\\\\]')\n                   .replace(/-/g, '[-]')\n                   .replace(/\\./g, '[.]')\n                   .replace(/\\*/g, '[*]')\n                   .replace(/\\+/g, '[+]')\n                   .replace(/\\?/g, '[?]')\n                   .replace(/\\$/g, '[$]')\n                   .replace(/\\^/g, '[^]')\n                   .replace(/\\//g, '[/]')\n                   .replace(/\\\\s/g, '[\\\\s]');\n      }\n\n      function isFormatStringLiteral (text) {\n        return /^'.*'$/.test(text);\n      }\n\n      function trimLiteralEscapeChars (text) {\n        return text.replace(/^'(.*)'$/, '$1');\n      }\n\n      function buildDateParseRegex (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var re = abstractRegex;\n\n        // Replace abstracted values\n        for (var i = 0; i < dateElements.length; i++) {\n          re = re.split('${' + i + '}').join('(' + regExpMap[dateElements[i]] + ')');\n        }\n\n        return new RegExp('^' + re + '$', ['i']);\n      }\n\n      function setMapForFormat (format) {\n        var re = buildDateAbstractRegex(format);\n        return buildDateParseValuesMap(re);\n      }\n\n      function buildDateParseValuesMap (abstractRegex) {\n        var dateElements = Object.keys(regExpMap);\n        var valuesRegex = new RegExp('\\\\${(\\\\d+)}', 'g');\n        var valuesMatch;\n        var keyIndex;\n        var valueKey;\n        var valueFunction;\n        var valuesFunctionMap = [];\n\n        /* eslint-disable no-cond-assign */\n        while ((valuesMatch = valuesRegex.exec(abstractRegex)) !== null) {\n          keyIndex = valuesMatch[1];\n          valueKey = dateElements[keyIndex];\n          valueFunction = setFnMap[valueKey];\n\n          valuesFunctionMap.push(valueFunction);\n        }\n\n        return valuesFunctionMap;\n      }\n\n      $dateParser.init();\n      return $dateParser;\n\n    };\n\n    return DateParserFactory;\n\n  };\n\n});\n","'use strict';\n\nangular.module('mgcrea.ngStrap.helpers.dateFormatter', [])\n\n  .service('$dateFormatter', function ($locale, dateFilter) {\n\n    // The unused `lang` arguments are on purpose. The default implementation does not\n    // use them and it always uses the locale loaded into the `$locale` service.\n    // Custom implementations might use it, thus allowing different directives to\n    // have different languages.\n\n    this.getDefaultLocale = function () {\n      return $locale.id;\n    };\n\n    // Format is either a data format name, e.g. \"shortTime\" or \"fullDate\", or a date format\n    // Return either the corresponding date format or the given date format.\n    this.getDatetimeFormat = function (format, lang) {\n      return $locale.DATETIME_FORMATS[format] || format;\n    };\n\n    this.weekdaysShort = function (lang) {\n      return $locale.DATETIME_FORMATS.SHORTDAY;\n    };\n\n    function splitTimeFormat (format) {\n      return /(h+)([:\\.])?(m+)([:\\.])?(s*)[ ]?(a?)/i.exec(format).slice(1);\n    }\n\n    // h:mm a => h\n    this.hoursFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[0];\n    };\n\n    // h:mm a => mm\n    this.minutesFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[2];\n    };\n\n    // h:mm:ss a => ss\n    this.secondsFormat = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => :\n    this.timeSeparator = function (timeFormat) {\n      return splitTimeFormat(timeFormat)[1];\n    };\n\n    // h:mm:ss a => true, h:mm a => false\n    this.showSeconds = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[4];\n    };\n\n    // h:mm a => true, H.mm => false\n    this.showAM = function (timeFormat) {\n      return !!splitTimeFormat(timeFormat)[5];\n    };\n\n    this.formatDate = function (date, format, lang, timezone) {\n      return dateFilter(date, format, timezone);\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.dropdown', ['mgcrea.ngStrap.tooltip'])\n\n  .provider('$dropdown', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'dropdown',\n      prefixEvent: 'dropdown',\n      placement: 'bottom-left',\n      templateUrl: 'dropdown/dropdown.tpl.html',\n      trigger: 'click',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0\n    };\n\n    this.$get = function ($window, $rootScope, $tooltip, $timeout) {\n\n      var bodyEl = angular.element($window.document.body);\n      var matchesSelector = Element.prototype.matchesSelector || Element.prototype.webkitMatchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector;\n\n      function DropdownFactory (element, config) {\n\n        var $dropdown = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        /* var scope = */$dropdown.$scope = options.scope && options.scope.$new() || $rootScope.$new();\n\n        if (options.inlineTemplate === true) {\n          options.inlineTemplate = '.dropdown-menu';\n        }\n        if (options.inlineTemplate && !options.target) {\n          options.target = element.parent();\n        }\n\n        $dropdown = $tooltip(element, options);\n\n        // Protected methods\n\n        $dropdown.$onKeyDown = function (evt) {\n          if (!/(38|40)/.test(evt.keyCode)) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          // Retrieve focused index\n          var items = angular.element($dropdown.$element[0].querySelectorAll('li:not(.divider) a'));\n          if (!items.length) return;\n          var index;\n          angular.forEach(items, function (el, i) {\n            if (matchesSelector && matchesSelector.call(el, ':focus')) index = i;\n          });\n\n          // Navigate with keyboard\n          if (evt.keyCode === 38 && index > 0) index--;\n          else if (evt.keyCode === 40 && index < items.length - 1) index++;\n          else if (angular.isUndefined(index)) index = 0;\n          items.eq(index)[0].focus();\n\n        };\n\n        // Overrides\n\n        var show = $dropdown.show;\n        $dropdown.show = function () {\n          var target = getTarget();\n          if (target.hasClass('dropdown') || target.hasClass('dropup')) target.addClass('open');\n          show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            if (options.keyboard && $dropdown.$element) $dropdown.$element.on('keydown', $dropdown.$onKeyDown);\n            bodyEl.on('click', onBodyClick);\n          }, 0, false);\n        };\n\n        var hide = $dropdown.hide;\n        $dropdown.hide = function () {\n          var dropdownElement = $dropdown.$element;\n          if (!$dropdown.$isShown) return;\n          hide();\n          if ($dropdown.$isShown) return; // support preventing hide\n          if (options.keyboard && dropdownElement) dropdownElement.off('keydown', $dropdown.$onKeyDown);\n          bodyEl.off('click', onBodyClick);\n          var target = getTarget();\n          if (target.hasClass('dropdown') || target.hasClass('dropup')) target.removeClass('open');\n        };\n\n        var destroy = $dropdown.destroy;\n        $dropdown.destroy = function () {\n          bodyEl.off('click', onBodyClick);\n          destroy();\n        };\n\n        // Private functions\n\n        function onBodyClick (evt) {\n          if (evt.target === element[0]) return;\n          return evt.target !== element[0] && $dropdown.hide();\n        }\n\n        function getTarget() {\n          return options.target || element.parent();\n        }\n\n        return $dropdown;\n\n      }\n\n      return DropdownFactory;\n\n    };\n\n  })\n\n  .directive('bsDropdown', function ($window, $sce, $dropdown) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      compile: function (tElement, tAttrs) {\n\n        // Directive options\n        var options = {};\n\n        // Support for inlined template (next sibling)\n        // It must be fetched before compilation\n        if (!tAttrs.bsDropdown) {\n          var nextSibling = tElement[0].nextSibling;\n          while (nextSibling && nextSibling.nodeType !== 1) {\n            nextSibling = nextSibling.nextSibling;\n          }\n          if (nextSibling && nextSibling.className.split(' ').indexOf('dropdown-menu') >= 0) {\n            options.template = nextSibling.outerHTML;\n            options.templateUrl = undefined;\n            nextSibling.parentNode.removeChild(nextSibling);\n          }\n        }\n\n        return function postLink (scope, element, attr) {\n\n          // Directive options\n          options.scope = scope;\n          angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'target', 'trigger', 'keyboard', 'html', 'animation', 'id', 'autoClose', 'inlineTemplate'], function (key) {\n            if (angular.isDefined(tAttrs[key])) options[key] = tAttrs[key];\n          });\n\n          // use string regex match boolean attr falsy values, leave truthy values be\n          var falseValueRegExp = /^(false|0|)$/i;\n          angular.forEach(['html', 'container'], function (key) {\n            if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n          });\n\n          // bind functions from the attrs to the show and hide events\n          angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n            var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n            if (angular.isDefined(attr[bsKey])) {\n              options[key] = scope.$eval(attr[bsKey]);\n            }\n          });\n\n          // Support scope as an object\n          scope.$watch(attr.bsDropdown, function (newValue, oldValue) {\n            scope.content = newValue;\n          }, true);\n\n          // Initialize dropdown\n          var dropdown = $dropdown(element, options);\n\n          // Visibility binding support\n          if (attr.bsShow) {\n            scope.$watch(attr.bsShow, function (newValue, oldValue) {\n              if (!dropdown || !angular.isDefined(newValue)) return;\n              if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(dropdown),?/i);\n              if (newValue === true) {\n                dropdown.show();\n              } else {\n                dropdown.hide();\n              }\n            });\n          }\n\n          // Garbage collection\n          scope.$on('$destroy', function () {\n            if (dropdown) dropdown.destroy();\n            options = null;\n            dropdown = null;\n          });\n\n        };\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.datepicker', [\n  'mgcrea.ngStrap.helpers.dateParser',\n  'mgcrea.ngStrap.helpers.dateFormatter',\n  'mgcrea.ngStrap.tooltip'])\n\n  .provider('$datepicker', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      // Uncommenting the following line will break backwards compatability\n      // prefixEvent: 'datepicker',\n      prefixClass: 'datepicker',\n      placement: 'bottom-left',\n      templateUrl: 'datepicker/datepicker.tpl.html',\n      trigger: 'focus',\n      container: false,\n      keyboard: true,\n      html: false,\n      delay: 0,\n      // lang: $locale.id,\n      useNative: false,\n      dateType: 'date',\n      dateFormat: 'shortDate',\n      timezone: null,\n      modelDateFormat: null,\n      dayFormat: 'dd',\n      monthFormat: 'MMM',\n      yearFormat: 'yyyy',\n      monthTitleFormat: 'MMMM yyyy',\n      yearTitleFormat: 'yyyy',\n      strictFormat: false,\n      autoclose: false,\n      minDate: -Infinity,\n      maxDate: +Infinity,\n      startView: 0,\n      minView: 0,\n      startWeek: 0,\n      daysOfWeekDisabled: '',\n      hasToday: false,\n      hasClear: false,\n      iconLeft: 'glyphicon glyphicon-chevron-left',\n      iconRight: 'glyphicon glyphicon-chevron-right'\n    };\n\n    this.$get = function ($window, $document, $rootScope, $sce, $dateFormatter, datepickerViews, $tooltip, $timeout) {\n\n      var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n      var isTouch = ('createTouch' in $window.document) && isNative;\n      if (!defaults.lang) defaults.lang = $dateFormatter.getDefaultLocale();\n\n      function DatepickerFactory (element, controller, config) {\n\n        var $datepicker = $tooltip(element, angular.extend({}, defaults, config));\n        var parentScope = config.scope;\n        var options = $datepicker.$options;\n        var scope = $datepicker.$scope;\n        if (options.startView) options.startView -= options.minView;\n\n        // View vars\n\n        var pickerViews = datepickerViews($datepicker);\n        $datepicker.$views = pickerViews.views;\n        var viewDate = pickerViews.viewDate;\n        scope.$mode = options.startView;\n        scope.$iconLeft = options.iconLeft;\n        scope.$iconRight = options.iconRight;\n        scope.$hasToday = options.hasToday;\n        scope.$hasClear = options.hasClear;\n        var $picker = $datepicker.$views[scope.$mode];\n\n        // Scope methods\n\n        scope.$select = function (date) {\n          $datepicker.select(date);\n        };\n        scope.$selectPane = function (value) {\n          $datepicker.$selectPane(value);\n        };\n        scope.$toggleMode = function () {\n          $datepicker.setMode((scope.$mode + 1) % $datepicker.$views.length);\n        };\n        scope.$setToday = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(new Date());\n          } else {\n            $datepicker.select(new Date(), true);\n          }\n        };\n        scope.$clear = function () {\n          if (options.autoclose) {\n            $datepicker.setMode(0);\n            $datepicker.select(null);\n          } else {\n            $datepicker.select(null, true);\n          }\n        };\n\n        // Public methods\n\n        $datepicker.update = function (date) {\n          // console.warn('$datepicker.update() newValue=%o', date);\n          if (angular.isDate(date) && !isNaN(date.getTime())) {\n            $datepicker.$date = date;\n            $picker.update.call($picker, date);\n          }\n          // Build only if pristine\n          $datepicker.$build(true);\n        };\n\n        $datepicker.updateDisabledDates = function (dateRanges) {\n          options.disabledDateRanges = dateRanges;\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], $datepicker.$setDisabledEl);\n          }\n        };\n\n        $datepicker.select = function (date, keep) {\n          // console.warn('$datepicker.select', date, scope.$mode);\n          if (angular.isDate(date)) {\n            if (!angular.isDate(controller.$dateValue) || isNaN(controller.$dateValue.getTime())) {\n              controller.$dateValue = new Date(date);\n            }\n          } else {\n            controller.$dateValue = null;\n          }\n          if (!scope.$mode || keep) {\n            controller.$setViewValue(angular.copy(date));\n            controller.$render();\n            if (options.autoclose && !keep) {\n              $timeout(function () { $datepicker.hide(true); });\n            }\n          } else {\n            angular.extend(viewDate, {year: date.getFullYear(), month: date.getMonth(), date: date.getDate()});\n            $datepicker.setMode(scope.$mode - 1);\n            $datepicker.$build();\n          }\n        };\n\n        $datepicker.setMode = function (mode) {\n          // console.warn('$datepicker.setMode', mode);\n          scope.$mode = mode;\n          $picker = $datepicker.$views[scope.$mode];\n          $datepicker.$build();\n        };\n\n        // Protected methods\n\n        $datepicker.$build = function (pristine) {\n          // console.warn('$datepicker.$build() viewDate=%o', viewDate);\n          if (pristine === true && $picker.built) return;\n          if (pristine === false && !$picker.built) return;\n          $picker.build.call($picker);\n        };\n\n        $datepicker.$updateSelected = function () {\n          for (var i = 0, l = scope.rows.length; i < l; i++) {\n            angular.forEach(scope.rows[i], updateSelected);\n          }\n        };\n\n        $datepicker.$isSelected = function (date) {\n          return $picker.isSelected(date);\n        };\n\n        $datepicker.$setDisabledEl = function (el) {\n          el.disabled = $picker.isDisabled(el.date);\n        };\n\n        $datepicker.$selectPane = function (value) {\n          var steps = $picker.steps;\n          // set targetDate to first day of month to avoid problems with\n          // date values rollover. This assumes the viewDate does not\n          // depend on the day of the month\n          var targetDate = new Date(Date.UTC(viewDate.year + ((steps.year || 0) * value), viewDate.month + ((steps.month || 0) * value), 1));\n          angular.extend(viewDate, {year: targetDate.getUTCFullYear(), month: targetDate.getUTCMonth(), date: targetDate.getUTCDate()});\n          $datepicker.$build();\n        };\n\n        $datepicker.$onMouseDown = function (evt) {\n          // Prevent blur on mousedown on .dropdown-menu\n          evt.preventDefault();\n          evt.stopPropagation();\n          // Emulate click for mobile devices\n          if (isTouch) {\n            var targetEl = angular.element(evt.target);\n            if (targetEl[0].nodeName.toLowerCase() !== 'button') {\n              targetEl = targetEl.parent();\n            }\n            targetEl.triggerHandler('click');\n          }\n        };\n\n        $datepicker.$onKeyDown = function (evt) {\n          if (!/(38|37|39|40|13)/.test(evt.keyCode) || evt.shiftKey || evt.altKey) return;\n          evt.preventDefault();\n          evt.stopPropagation();\n\n          if (evt.keyCode === 13) {\n            if (!scope.$mode) {\n              $datepicker.hide(true);\n            } else {\n              scope.$apply(function () { $datepicker.setMode(scope.$mode - 1); });\n            }\n            return;\n          }\n\n          // Navigate with keyboard\n          $picker.onKeyDown(evt);\n          parentScope.$digest();\n        };\n\n        // Private\n\n        function updateSelected (el) {\n          el.selected = $datepicker.$isSelected(el.date);\n        }\n\n        function focusElement () {\n          element[0].focus();\n        }\n\n        // Overrides\n\n        var _init = $datepicker.init;\n        $datepicker.init = function () {\n          if (isNative && options.useNative) {\n            element.prop('type', 'date');\n            element.css('-webkit-appearance', 'textfield');\n            return;\n          } else if (isTouch) {\n            element.prop('type', 'text');\n            element.attr('readonly', 'true');\n            element.on('click', focusElement);\n          }\n          _init();\n        };\n\n        var _destroy = $datepicker.destroy;\n        $datepicker.destroy = function () {\n          if (isNative && options.useNative) {\n            element.off('click', focusElement);\n          }\n          _destroy();\n        };\n\n        var _show = $datepicker.show;\n        $datepicker.show = function () {\n          if ((!isTouch && element.attr('readonly')) || element.attr('disabled')) return;\n          _show();\n          // use timeout to hookup the events to prevent\n          // event bubbling from being processed imediately.\n          $timeout(function () {\n            // if $datepicker is no longer showing, don't setup events\n            if (!$datepicker.$isShown) return;\n            $datepicker.$element.on(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n            if (options.keyboard) {\n              element.on('keydown', $datepicker.$onKeyDown);\n            }\n          }, 0, false);\n        };\n\n        var _hide = $datepicker.hide;\n        $datepicker.hide = function (blur) {\n          var datepickerElement = $datepicker.$element;\n          if (!$datepicker.$isShown) return;\n          _hide(blur);\n          if (!$datepicker.$isShown) return; // support preventing hide\n          datepickerElement.off(isTouch ? 'touchstart' : 'mousedown', $datepicker.$onMouseDown);\n          if (options.keyboard) {\n            element.off('keydown', $datepicker.$onKeyDown);\n          }\n        };\n\n        return $datepicker;\n\n      }\n\n      DatepickerFactory.defaults = defaults;\n      return DatepickerFactory;\n\n    };\n\n  })\n\n  .directive('bsDatepicker', function ($window, $parse, $q, $dateFormatter, $dateParser, $datepicker) {\n\n    // var defaults = $datepicker.defaults;\n    var isNative = /(ip[ao]d|iphone|android)/ig.test($window.navigator.userAgent);\n\n    return {\n      restrict: 'EAC',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        // Directive options\n        var options = {scope: scope};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'container', 'delay', 'trigger', 'html', 'animation', 'autoclose', 'dateType', 'dateFormat', 'timezone', 'modelDateFormat', 'dayFormat', 'strictFormat', 'startWeek', 'startDate', 'useNative', 'lang', 'startView', 'minView', 'iconLeft', 'iconRight', 'daysOfWeekDisabled', 'id', 'prefixClass', 'prefixEvent', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['html', 'container', 'autoclose', 'useNative', 'hasToday', 'hasClear'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) {\n            options[key] = false;\n          }\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Initialize datepicker\n        var datepicker = $datepicker(element, controller, options);\n        options = datepicker.$options;\n        // Set expected iOS format\n        if (isNative && options.useNative) options.dateFormat = 'yyyy-MM-dd';\n\n        var lang = options.lang;\n\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        // Visibility binding support\n        if (attr.bsShow) {\n          scope.$watch(attr.bsShow, function (newValue, oldValue) {\n            if (!datepicker || !angular.isDefined(newValue)) return;\n            if (angular.isString(newValue)) newValue = !!newValue.match(/true|,?(datepicker),?/i);\n            if (newValue === true) {\n              datepicker.show();\n            } else {\n              datepicker.hide();\n            }\n          });\n        }\n\n        // Observe attributes for changes\n        angular.forEach(['minDate', 'maxDate'], function (key) {\n          // console.warn('attr.$observe(%s)', key, attr[key]);\n          if (angular.isDefined(attr[key])) {\n            attr.$observe(key, function (newValue) {\n              // console.warn('attr.$observe(%s)=%o', key, newValue);\n              datepicker.$options[key] = dateParser.getDateForAttribute(key, newValue);\n              // Build only if dirty\n              if (!isNaN(datepicker.$options[key])) datepicker.$build(false);\n              validateAgainstMinMaxDate(controller.$dateValue);\n            });\n          }\n        });\n\n        // Observe date format\n        if (angular.isDefined(attr.dateFormat)) {\n          attr.$observe('dateFormat', function (newValue) {\n            datepicker.$options.dateFormat = newValue;\n          });\n        }\n\n        // Watch model for changes\n        scope.$watch(attr.ngModel, function (newValue, oldValue) {\n          datepicker.update(controller.$dateValue);\n        }, true);\n\n        // Normalize undefined/null/empty array,\n        // so that we don't treat changing from undefined->null as a change.\n        function normalizeDateRanges (ranges) {\n          if (!ranges || !ranges.length) return null;\n          return ranges;\n        }\n\n        if (angular.isDefined(attr.disabledDates)) {\n          scope.$watch(attr.disabledDates, function (disabledRanges, previousValue) {\n            disabledRanges = normalizeDateRanges(disabledRanges);\n            previousValue = normalizeDateRanges(previousValue);\n\n            if (disabledRanges) {\n              datepicker.updateDisabledDates(disabledRanges);\n            }\n          });\n        }\n\n        function validateAgainstMinMaxDate (parsedDate) {\n          if (!angular.isDate(parsedDate)) return;\n          var isMinValid = isNaN(datepicker.$options.minDate) || parsedDate.getTime() >= datepicker.$options.minDate;\n          var isMaxValid = isNaN(datepicker.$options.maxDate) || parsedDate.getTime() <= datepicker.$options.maxDate;\n          var isValid = isMinValid && isMaxValid;\n          controller.$setValidity('date', isValid);\n          controller.$setValidity('min', isMinValid);\n          controller.$setValidity('max', isMaxValid);\n          // Only update the model when we have a valid date\n          if (isValid) controller.$dateValue = parsedDate;\n        }\n\n        // viewValue -> $parsers -> modelValue\n        controller.$parsers.unshift(function (viewValue) {\n          // console.warn('$parser(\"%s\"): viewValue=%o', element.attr('ng-model'), viewValue);\n          var date;\n          // Null values should correctly reset the model value & validity\n          if (!viewValue) {\n            controller.$setValidity('date', true);\n            // BREAKING CHANGE:\n            // return null (not undefined) when input value is empty, so angularjs 1.3\n            // ngModelController can go ahead and run validators, like ngRequired\n            return null;\n          }\n          var parsedDate = dateParser.parse(viewValue, controller.$dateValue);\n          if (!parsedDate || isNaN(parsedDate.getTime())) {\n            controller.$setValidity('date', false);\n            // return undefined, causes ngModelController to\n            // invalidate model value\n            return;\n          }\n          validateAgainstMinMaxDate(parsedDate);\n\n          if (options.dateType === 'string') {\n            date = dateParser.timezoneOffsetAdjust(parsedDate, options.timezone, true);\n            return formatDate(date, options.modelDateFormat || options.dateFormat);\n          }\n          date = dateParser.timezoneOffsetAdjust(controller.$dateValue, options.timezone, true);\n          if (options.dateType === 'number') {\n            return date.getTime();\n          } else if (options.dateType === 'unix') {\n            return date.getTime() / 1000;\n          } else if (options.dateType === 'iso') {\n            return date.toISOString();\n          }\n          return new Date(date);\n        });\n\n        // modelValue -> $formatters -> viewValue\n        controller.$formatters.push(function (modelValue) {\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n          var date;\n          if (angular.isUndefined(modelValue) || modelValue === null) {\n            date = NaN;\n          } else if (angular.isDate(modelValue)) {\n            date = modelValue;\n          } else if (options.dateType === 'string') {\n            date = dateParser.parse(modelValue, null, options.modelDateFormat);\n          } else if (options.dateType === 'unix') {\n            date = new Date(modelValue * 1000);\n          } else {\n            date = new Date(modelValue);\n          }\n          // Setup default value?\n          // if (isNaN(date.getTime())) {\n          //   var today = new Date();\n          //   date = new Date(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0, 0);\n          // }\n          controller.$dateValue = dateParser.timezoneOffsetAdjust(date, options.timezone);\n          return getDateFormattedString();\n        });\n\n        // viewValue -> element\n        controller.$render = function () {\n          // console.warn('$render(\"%s\"): viewValue=%o', element.attr('ng-model'), controller.$viewValue);\n          element.val(getDateFormattedString());\n        };\n\n        function getDateFormattedString () {\n          return !controller.$dateValue || isNaN(controller.$dateValue.getTime()) ? '' : formatDate(controller.$dateValue, options.dateFormat);\n        }\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (datepicker) datepicker.destroy();\n          options = null;\n          datepicker = null;\n        });\n\n      }\n    };\n\n  })\n\n  .provider('datepickerViews', function () {\n\n    // var defaults = this.defaults = {\n    //   dayFormat: 'dd',\n    //   daySplit: 7\n    // };\n\n    // Split array into smaller arrays\n    function split (arr, size) {\n      var arrays = [];\n      while (arr.length > 0) {\n        arrays.push(arr.splice(0, size));\n      }\n      return arrays;\n    }\n\n    // Modulus operator\n    function mod (n, m) {\n      return ((n % m) + m) % m;\n    }\n\n    this.$get = function ($dateFormatter, $dateParser, $sce) {\n\n      return function (picker) {\n\n        var scope = picker.$scope;\n        var options = picker.$options;\n\n        var lang = options.lang;\n        var formatDate = function (date, format) {\n          return $dateFormatter.formatDate(date, format, lang);\n        };\n        var dateParser = $dateParser({format: options.dateFormat, lang: lang, strict: options.strictFormat});\n\n        var weekDaysMin = $dateFormatter.weekdaysShort(lang);\n        var weekDaysLabels = weekDaysMin.slice(options.startWeek).concat(weekDaysMin.slice(0, options.startWeek));\n        var weekDaysLabelsHtml = $sce.trustAsHtml('<th class=\"dow text-center\">' + weekDaysLabels.join('</th><th class=\"dow text-center\">') + '</th>');\n\n        var startDate = picker.$date || (options.startDate ? dateParser.getDateForAttribute('startDate', options.startDate) : new Date());\n        var viewDate = {year: startDate.getFullYear(), month: startDate.getMonth(), date: startDate.getDate()};\n\n        var views = [{\n          format: options.dayFormat,\n          split: 7,\n          steps: {month: 1},\n          update: function (date, force) {\n            if (!this.built || force || date.getFullYear() !== viewDate.year || date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getDate() !== viewDate.date || date.getDate() === 1) {\n                // chaging picker current month will cause viewDate.date to be set to first day of the month,\n                // in $datepicker.$selectPane, so picker would not update selected day display if\n                // user picks first day of the new month.\n                // As a workaround, we are always forcing update when picked date is first day of month.\n              viewDate.date = picker.$date.getDate();\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstDayOfMonth = new Date(viewDate.year, viewDate.month, 1);\n            var firstDayOfMonthOffset = firstDayOfMonth.getTimezoneOffset();\n            var firstDate = new Date(+firstDayOfMonth - mod(firstDayOfMonth.getDay() - options.startWeek, 7) * 864e5);\n            var firstDateOffset = firstDate.getTimezoneOffset();\n            var today = dateParser.timezoneOffsetAdjust(new Date(), options.timezone).toDateString();\n              // Handle daylight time switch\n            if (firstDateOffset !== firstDayOfMonthOffset) firstDate = new Date(+firstDate + (firstDateOffset - firstDayOfMonthOffset) * 60e3);\n            var days = [];\n            var day;\n            for (var i = 0; i < 42; i++) { // < 7 * 6\n              day = dateParser.daylightSavingAdjust(new Date(firstDate.getFullYear(), firstDate.getMonth(), firstDate.getDate() + i));\n              days.push({date: day, isToday: day.toDateString() === today, label: formatDate(day, this.format), selected: picker.$date && this.isSelected(day), muted: day.getMonth() !== viewDate.month, disabled: this.isDisabled(day)});\n            }\n            scope.title = formatDate(firstDayOfMonth, options.monthTitleFormat);\n            scope.showLabels = true;\n            scope.labels = weekDaysLabelsHtml;\n            scope.rows = split(days, this.split);\n            scope.isTodayDisabled = this.isDisabled(new Date());\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth() && date.getDate() === picker.$date.getDate();\n          },\n          isDisabled: function (date) {\n            var time = date.getTime();\n\n              // Disabled because of min/max date.\n            if (time < options.minDate || time > options.maxDate) return true;\n\n              // Disabled due to being a disabled day of the week\n            if (options.daysOfWeekDisabled.indexOf(date.getDay()) !== -1) return true;\n\n              // Disabled because of disabled date range.\n            if (options.disabledDateRanges) {\n              for (var i = 0; i < options.disabledDateRanges.length; i++) {\n                if (time >= options.disabledDateRanges[i].start && time <= options.disabledDateRanges[i].end) {\n                  return true;\n                }\n              }\n            }\n\n            return false;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualTime = picker.$date.getTime();\n            var newDate;\n\n            if (evt.keyCode === 37) newDate = new Date(actualTime - 1 * 864e5);\n            else if (evt.keyCode === 38) newDate = new Date(actualTime - 7 * 864e5);\n            else if (evt.keyCode === 39) newDate = new Date(actualTime + 1 * 864e5);\n            else if (evt.keyCode === 40) newDate = new Date(actualTime + 7 * 864e5);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'month',\n          format: options.monthFormat,\n          split: 4,\n          steps: {year: 1},\n          update: function (date, force) {\n            if (!this.built || date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getMonth() !== viewDate.month) {\n              angular.extend(viewDate, {month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            // var firstMonth = new Date(viewDate.year, 0, 1);\n            var months = [];\n            var month;\n            for (var i = 0; i < 12; i++) {\n              month = new Date(viewDate.year, i, 1);\n              months.push({date: month, label: formatDate(month, this.format), selected: picker.$isSelected(month), disabled: this.isDisabled(month)});\n            }\n            scope.title = formatDate(month, options.yearTitleFormat);\n            scope.showLabels = false;\n            scope.rows = split(months, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear() && date.getMonth() === picker.$date.getMonth();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear(), date.getMonth() + 1, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualMonth = picker.$date.getMonth();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setMonth(actualMonth - 1);\n            else if (evt.keyCode === 38) newDate.setMonth(actualMonth - 4);\n            else if (evt.keyCode === 39) newDate.setMonth(actualMonth + 1);\n            else if (evt.keyCode === 40) newDate.setMonth(actualMonth + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }, {\n          name: 'year',\n          format: options.yearFormat,\n          split: 4,\n          steps: {year: 12},\n          update: function (date, force) {\n            if (!this.built || force || parseInt(date.getFullYear() / 20, 10) !== parseInt(viewDate.year / 20, 10)) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$build();\n            } else if (date.getFullYear() !== viewDate.year) {\n              angular.extend(viewDate, {year: picker.$date.getFullYear(), month: picker.$date.getMonth(), date: picker.$date.getDate()});\n              picker.$updateSelected();\n            }\n          },\n          build: function () {\n            var firstYear = viewDate.year - viewDate.year % (this.split * 3);\n            var years = [];\n            var year;\n            for (var i = 0; i < 12; i++) {\n              year = new Date(firstYear + i, 0, 1);\n              years.push({date: year, label: formatDate(year, this.format), selected: picker.$isSelected(year), disabled: this.isDisabled(year)});\n            }\n            scope.title = years[0].label + '-' + years[years.length - 1].label;\n            scope.showLabels = false;\n            scope.rows = split(years, this.split);\n            this.built = true;\n          },\n          isSelected: function (date) {\n            return picker.$date && date.getFullYear() === picker.$date.getFullYear();\n          },\n          isDisabled: function (date) {\n            var lastDate = +new Date(date.getFullYear() + 1, 0, 0);\n            return lastDate < options.minDate || date.getTime() > options.maxDate;\n          },\n          onKeyDown: function (evt) {\n            if (!picker.$date) {\n              return;\n            }\n            var actualYear = picker.$date.getFullYear();\n            var newDate = new Date(picker.$date);\n\n            if (evt.keyCode === 37) newDate.setYear(actualYear - 1);\n            else if (evt.keyCode === 38) newDate.setYear(actualYear - 4);\n            else if (evt.keyCode === 39) newDate.setYear(actualYear + 1);\n            else if (evt.keyCode === 40) newDate.setYear(actualYear + 4);\n\n            if (!this.isDisabled(newDate)) picker.select(newDate, true);\n          }\n        }];\n\n        return {\n          views: options.minView ? Array.prototype.slice.call(views, options.minView) : views,\n          viewDate: viewDate\n        };\n\n      };\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.collapse', [])\n\n  .provider('$collapse', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-collapse',\n      disallowToggle: false,\n      activeClass: 'in',\n      startCollapsed: false,\n      allowMultiple: false\n    };\n\n    var controller = this.controller = function ($scope, $element, $attrs) {\n      var self = this;\n\n      // Attributes options\n      self.$options = angular.copy(defaults);\n      angular.forEach(['animation', 'disallowToggle', 'activeClass', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key])) self.$options[key] = $attrs[key];\n      });\n\n      // use string regex match boolean attr falsy values, leave truthy values be\n      var falseValueRegExp = /^(false|0|)$/i;\n      angular.forEach(['disallowToggle', 'startCollapsed', 'allowMultiple'], function (key) {\n        if (angular.isDefined($attrs[key]) && falseValueRegExp.test($attrs[key])) {\n          self.$options[key] = false;\n        }\n      });\n\n      self.$toggles = [];\n      self.$targets = [];\n\n      self.$viewChangeListeners = [];\n\n      self.$registerToggle = function (element) {\n        self.$toggles.push(element);\n      };\n      self.$registerTarget = function (element) {\n        self.$targets.push(element);\n      };\n\n      self.$unregisterToggle = function (element) {\n        var index = self.$toggles.indexOf(element);\n        // remove toggle from $toggles array\n        self.$toggles.splice(index, 1);\n      };\n      self.$unregisterTarget = function (element) {\n        var index = self.$targets.indexOf(element);\n\n        // remove element from $targets array\n        self.$targets.splice(index, 1);\n\n        if (self.$options.allowMultiple) {\n          // remove target index from $active array values\n          deactivateItem(element);\n        }\n\n        // fix active item indexes\n        fixActiveItemIndexes(index);\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      // use array to store all the currently open panels\n      self.$targets.$active = !self.$options.startCollapsed ? [0] : [];\n      self.$setActive = $scope.$setActive = function (value) {\n        if (angular.isArray(value)) {\n          self.$targets.$active = value;\n        } else if (!self.$options.disallowToggle && isActive(value)) {\n          deactivateItem(value);\n        } else {\n          activateItem(value);\n        }\n\n        self.$viewChangeListeners.forEach(function (fn) {\n          fn();\n        });\n      };\n\n      self.$activeIndexes = function () {\n        if (self.$options.allowMultiple) {\n          return self.$targets.$active;\n        }\n        return self.$targets.$active.length === 1 ? self.$targets.$active[0] : -1;\n      };\n\n      function fixActiveItemIndexes (index) {\n        // item with index was removed, so we\n        // need to adjust other items index values\n        var activeIndexes = self.$targets.$active;\n        for (var i = 0; i < activeIndexes.length; i++) {\n          if (index < activeIndexes[i]) {\n            activeIndexes[i] = activeIndexes[i] - 1;\n          }\n\n          // the last item is active, so we need to\n          // adjust its index\n          if (activeIndexes[i] === self.$targets.length) {\n            activeIndexes[i] = self.$targets.length - 1;\n          }\n        }\n      }\n\n      function isActive (value) {\n        var activeItems = self.$targets.$active;\n        return activeItems.indexOf(value) !== -1;\n      }\n\n      function deactivateItem (value) {\n        var index = self.$targets.$active.indexOf(value);\n        if (index !== -1) {\n          self.$targets.$active.splice(index, 1);\n        }\n      }\n\n      function activateItem (value) {\n        if (!self.$options.allowMultiple) {\n          // remove current selected item\n          self.$targets.$active.splice(0, 1);\n        }\n\n        if (self.$targets.$active.indexOf(value) === -1) {\n          self.$targets.$active.push(value);\n        }\n      }\n\n    };\n\n    this.$get = function () {\n      var $collapse = {};\n      $collapse.defaults = defaults;\n      $collapse.controller = controller;\n      return $collapse;\n    };\n\n  })\n\n  .directive('bsCollapse', function ($window, $animate, $collapse) {\n\n    return {\n      require: ['?ngModel', 'bsCollapse'],\n      controller: ['$scope', '$element', '$attrs', $collapse.controller],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        if (ngModelCtrl) {\n\n          // Update the modelValue following\n          bsCollapseCtrl.$viewChangeListeners.push(function () {\n            ngModelCtrl.$setViewValue(bsCollapseCtrl.$activeIndexes());\n          });\n\n          // modelValue -> $formatters -> viewValue\n          ngModelCtrl.$formatters.push(function (modelValue) {\n            // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            if (angular.isArray(modelValue)) {\n              // model value is an array, so just replace\n              // the active items directly\n              bsCollapseCtrl.$setActive(modelValue);\n            } else {\n              var activeIndexes = bsCollapseCtrl.$activeIndexes();\n\n              if (angular.isArray(activeIndexes)) {\n                // we have an array of selected indexes\n                if (activeIndexes.indexOf(modelValue * 1) === -1) {\n                  // item with modelValue index is not active\n                  bsCollapseCtrl.$setActive(modelValue * 1);\n                }\n              } else if (activeIndexes !== modelValue * 1) {\n                bsCollapseCtrl.$setActive(modelValue * 1);\n              }\n            }\n            return modelValue;\n          });\n\n        }\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseToggle', function () {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base attr\n        element.attr('data-toggle', 'collapse');\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerToggle(element);\n\n        // remove toggle from collapse controller when toggle is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterToggle(element);\n        });\n\n        element.on('click', function () {\n          if (!attrs.disabled) {\n            var index = attrs.bsCollapseToggle && attrs.bsCollapseToggle !== 'bs-collapse-toggle' ? attrs.bsCollapseToggle : bsCollapseCtrl.$toggles.indexOf(element);\n            bsCollapseCtrl.$setActive(index * 1);\n            scope.$apply();\n          }\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsCollapseTarget', function ($animate) {\n\n    return {\n      require: ['^?ngModel', '^bsCollapse'],\n      // scope: true,\n      link: function postLink (scope, element, attrs, controllers) {\n\n        // var ngModelCtrl = controllers[0];\n        var bsCollapseCtrl = controllers[1];\n\n        // Add base class\n        element.addClass('collapse');\n\n        // Add animation class\n        if (bsCollapseCtrl.$options.animation) {\n          element.addClass(bsCollapseCtrl.$options.animation);\n        }\n\n        // Push pane to parent bsCollapse controller\n        bsCollapseCtrl.$registerTarget(element);\n\n        // remove pane target from collapse controller when target is destroyed\n        scope.$on('$destroy', function () {\n          bsCollapseCtrl.$unregisterTarget(element);\n        });\n\n        function render () {\n          var index = bsCollapseCtrl.$targets.indexOf(element);\n          var active = bsCollapseCtrl.$activeIndexes();\n          var action = 'removeClass';\n          if (angular.isArray(active)) {\n            if (active.indexOf(index) !== -1) {\n              action = 'addClass';\n            }\n          } else if (index === active) {\n            action = 'addClass';\n          }\n\n          $animate[action](element, bsCollapseCtrl.$options.activeClass);\n        }\n\n        bsCollapseCtrl.$viewChangeListeners.push(function () {\n          render();\n        });\n        render();\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.button', [])\n\n  .provider('$button', function () {\n\n    var defaults = this.defaults = {\n      activeClass: 'active',\n      toggleEvent: 'click'\n    };\n\n    this.$get = function () {\n      return {defaults: defaults};\n    };\n\n  })\n\n  .directive('bsCheckboxGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"checkbox\"]');\n        angular.forEach(children, function (child) {\n          var childEl = angular.element(child);\n          childEl.attr('bs-checkbox', '');\n          childEl.attr('ng-model', attr.ngModel + '.' + childEl.attr('value'));\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsCheckbox', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support label > input[type=\"checkbox\"]\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var trueValue = angular.isDefined(attr.trueValue) ? attr.trueValue : true;\n        if (constantValueRegExp.test(attr.trueValue)) {\n          trueValue = scope.$eval(attr.trueValue);\n        }\n        var falseValue = angular.isDefined(attr.falseValue) ? attr.falseValue : false;\n        if (constantValueRegExp.test(attr.falseValue)) {\n          falseValue = scope.$eval(attr.falseValue);\n        }\n\n        // Parse exotic values\n        var hasExoticValues = typeof trueValue !== 'boolean' || typeof falseValue !== 'boolean';\n        if (hasExoticValues) {\n          controller.$parsers.push(function (viewValue) {\n            // console.warn('$parser', element.attr('ng-model'), 'viewValue', viewValue);\n            return viewValue ? trueValue : falseValue;\n          });\n          // modelValue -> $formatters -> viewValue\n          controller.$formatters.push(function (modelValue) {\n             // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\n            return angular.equals(modelValue, trueValue);\n          });\n        }\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = !!controller.$viewValue;\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('ng-model'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            if (!isInput) {\n              controller.$setViewValue(!activeElement.hasClass('active'));\n            }\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  })\n\n  .directive('bsRadioGroup', function () {\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      compile: function postLink (element, attr) {\n        element.attr('data-toggle', 'buttons');\n        element.removeAttr('ng-model');\n        var children = element[0].querySelectorAll('input[type=\"radio\"]');\n        angular.forEach(children, function (child) {\n          angular.element(child).attr('bs-radio', '');\n          angular.element(child).attr('ng-model', attr.ngModel);\n        });\n      }\n\n    };\n\n  })\n\n  .directive('bsRadio', function ($button, $$rAF) {\n\n    var defaults = $button.defaults;\n    var constantValueRegExp = /^(true|false|\\d+)$/;\n\n    return {\n      restrict: 'A',\n      require: 'ngModel',\n      link: function postLink (scope, element, attr, controller) {\n\n        var options = defaults;\n\n        // Support `label > input[type=\"radio\"]` markup\n        var isInput = element[0].nodeName === 'INPUT';\n        var activeElement = isInput ? element.parent() : element;\n\n        var value;\n        attr.$observe('value', function (v) {\n          if (typeof v !== 'boolean' && constantValueRegExp.test(v)) {\n            value = scope.$eval(v);\n          } else {\n            value = v;\n          }\n          controller.$render();\n        });\n\n        // model -> view\n        controller.$render = function () {\n          // console.warn('$render', element.attr('value'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\n          var isActive = angular.equals(controller.$viewValue, value);\n          $$rAF(function () {\n            if (isInput) element[0].checked = isActive;\n            activeElement.toggleClass(options.activeClass, isActive);\n          });\n        };\n\n        // view -> model\n        element.bind(options.toggleEvent, function () {\n          scope.$apply(function () {\n            // console.warn('!click', element.attr('value'), 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue, 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue);\n            controller.$setViewValue(value);\n            controller.$render();\n          });\n        });\n\n      }\n\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.aside', ['mgcrea.ngStrap.modal'])\n\n  .provider('$aside', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade-and-slide-right',\n      prefixClass: 'aside',\n      prefixEvent: 'aside',\n      placement: 'right',\n      templateUrl: 'aside/aside.tpl.html',\n      contentTemplate: false,\n      container: false,\n      element: null,\n      backdrop: true,\n      keyboard: true,\n      html: false,\n      show: true\n    };\n\n    this.$get = function ($modal) {\n\n      function AsideFactory (config) {\n\n        var $aside = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $aside = $modal(options);\n\n        return $aside;\n\n      }\n\n      return AsideFactory;\n\n    };\n\n  })\n\n  .directive('bsAside', function ($window, $sce, $aside) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'contentTemplate', 'placement', 'backdrop', 'keyboard', 'html', 'container', 'animation'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['backdrop', 'keyboard', 'html', 'container'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAside) {\n          scope.$watch(attr.bsAside, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize aside\n        var aside = $aside(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', aside.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (aside) aside.destroy();\n          options = null;\n          aside = null;\n        });\n\n      }\n    };\n\n  });\n","'use strict';\n\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\n\n  .provider('$affix', function () {\n\n    var defaults = this.defaults = {\n      offsetTop: 'auto',\n      inlineStyles: true,\n      setWidth: true\n    };\n\n    this.$get = function ($window, debounce, dimensions) {\n\n      var bodyEl = angular.element($window.document.body);\n      var windowEl = angular.element($window);\n\n      function AffixFactory (element, config) {\n\n        var $affix = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n        var targetEl = options.target;\n\n        // Initial private vars\n        var reset = 'affix affix-top affix-bottom';\n        var setWidth = false;\n        var initialAffixTop = 0;\n        var initialOffsetTop = 0;\n        var offsetTop = 0;\n        var offsetBottom = 0;\n        var affixed = null;\n        var unpin = null;\n\n        var parent = element.parent();\n        // Options: custom parent\n        if (options.offsetParent) {\n          if (options.offsetParent.match(/^\\d+$/)) {\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\n              parent = parent.parent();\n            }\n          } else {\n            parent = angular.element(options.offsetParent);\n          }\n        }\n\n        $affix.init = function () {\n\n          this.$parseOffsets();\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\n          setWidth = options.setWidth && !element[0].style.width;\n\n          // Bind events\n          targetEl.on('scroll', this.checkPosition);\n          targetEl.on('click', this.checkPositionWithEventLoop);\n          windowEl.on('resize', this.$debouncedOnResize);\n\n          // Both of these checkPosition() calls are necessary for the case where\n          // the user hits refresh after scrolling to the bottom of the page.\n          this.checkPosition();\n          this.checkPositionWithEventLoop();\n\n        };\n\n        $affix.destroy = function () {\n\n          // Unbind events\n          targetEl.off('scroll', this.checkPosition);\n          targetEl.off('click', this.checkPositionWithEventLoop);\n          windowEl.off('resize', this.$debouncedOnResize);\n\n        };\n\n        $affix.checkPositionWithEventLoop = function () {\n\n          // IE 9 throws an error if we use 'this' instead of '$affix'\n          // in this setTimeout call\n          setTimeout($affix.checkPosition, 1);\n\n        };\n\n        $affix.checkPosition = function () {\n          // if (!this.$element.is(':visible')) return\n\n          var scrollTop = getScrollTop();\n          var position = dimensions.offset(element[0]);\n          var elementHeight = dimensions.height(element[0]);\n\n          // Get required affix class according to position\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\n\n          // Did affix status changed this last check?\n          if (affixed === affix) return;\n          affixed = affix;\n\n          if (affix === 'top') {\n            unpin = null;\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', '');\n            }\n          } else if (affix === 'bottom') {\n            if (options.offsetUnpin) {\n              unpin = -(options.offsetUnpin * 1);\n            } else {\n              // Calculate unpin threshold when affixed to bottom.\n              // Hopefully the browser scrolls pixel by pixel.\n              unpin = position.top - scrollTop;\n            }\n            if (setWidth) {\n              element.css('width', '');\n            }\n            if (options.inlineStyles) {\n              element.css('position', (options.offsetParent) ? '' : 'relative');\n              element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\n            }\n          } else { // affix === 'middle'\n            unpin = null;\n            if (setWidth) {\n              element.css('width', element[0].offsetWidth + 'px');\n            }\n            if (options.inlineStyles) {\n              element.css('position', 'fixed');\n              element.css('top', initialAffixTop + 'px');\n            }\n          }\n\n          // Add proper affix class\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\n\n        };\n\n        $affix.$onResize = function () {\n          $affix.$parseOffsets();\n          $affix.checkPosition();\n        };\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\n\n        $affix.$parseOffsets = function () {\n          var initialPosition = element[0].style.position;\n          var initialTop = element[0].style.top;\n          // Reset position to calculate correct offsetTop\n          if (options.inlineStyles) {\n            element.css('position', (options.offsetParent) ? '' : 'relative');\n            element.css('top', '');\n          }\n\n          if (options.offsetTop) {\n            if (options.offsetTop === 'auto') {\n              options.offsetTop = '+0';\n            }\n            if (options.offsetTop.match(/^[-+]\\d+$/)) {\n              initialAffixTop = - options.offsetTop * 1;\n              if (options.offsetParent) {\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\n              } else {\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\n              }\n            } else {\n              offsetTop = options.offsetTop * 1;\n            }\n          }\n\n          if (options.offsetBottom) {\n            if (options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\n              // add 1 pixel due to rounding problems...\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\n            } else {\n              offsetBottom = options.offsetBottom * 1;\n            }\n          }\n\n          // Bring back the element's position after calculations\n          if (options.inlineStyles) {\n            element.css('position', initialPosition);\n            element.css('top', initialTop);\n          }\n        };\n\n        // Private methods\n\n        function getRequiredAffixClass (_unpin, position, elementHeight) {\n          var scrollTop = getScrollTop();\n          var scrollHeight = getScrollHeight();\n\n          if (scrollTop <= offsetTop) {\n            return 'top';\n          } else if (_unpin !== null) {\n            return scrollTop + _unpin <= position.top ? 'middle' : 'bottom';\n          } else if (offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\n            return 'bottom';\n          }\n          return 'middle';\n        }\n\n        function getScrollTop () {\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\n        }\n\n        function getScrollHeight () {\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\n        }\n\n        $affix.init();\n        return $affix;\n\n      }\n\n      return AffixFactory;\n\n    };\n\n  })\n\n  .directive('bsAffix', function ($affix, $window, $timeout) {\n\n    return {\n      restrict: 'EAC',\n      require: '^?bsAffixTarget',\n      link: function postLink (scope, element, attr, affixTarget) {\n\n        var options = {scope: scope, target: affixTarget ? affixTarget.$element : angular.element($window)};\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin', 'inlineStyles', 'setWidth'], function (key) {\n          if (angular.isDefined(attr[key])) {\n            var option = attr[key];\n            if (/true/i.test(option)) option = true;\n            if (/false/i.test(option)) option = false;\n            options[key] = option;\n          }\n        });\n\n        var affix;\n        $timeout(function () { affix = $affix(element, options); });\n        scope.$on('$destroy', function () {\n          if (affix) affix.destroy();\n          options = null;\n          affix = null;\n        });\n\n      }\n    };\n\n  })\n\n  .directive('bsAffixTarget', function () {\n    return {\n      controller: function ($element) {\n        this.$element = $element;\n      }\n    };\n  });\n","'use strict';\n\n// @BUG: following snippet won't compile correctly\n\nangular.module('mgcrea.ngStrap.alert', ['mgcrea.ngStrap.modal'])\n\n  .provider('$alert', function () {\n\n    var defaults = this.defaults = {\n      animation: 'am-fade',\n      prefixClass: 'alert',\n      prefixEvent: 'alert',\n      placement: null,\n      templateUrl: 'alert/alert.tpl.html',\n      container: false,\n      element: null,\n      backdrop: false,\n      keyboard: true,\n      show: true,\n      // Specific options\n      duration: false,\n      type: false,\n      dismissable: true\n    };\n\n    this.$get = function ($modal, $timeout) {\n\n      function AlertFactory (config) {\n\n        var $alert = {};\n\n        // Common vars\n        var options = angular.extend({}, defaults, config);\n\n        $alert = $modal(options);\n\n        // Support scope as string options [/*title, content, */ type, dismissable]\n        $alert.$scope.dismissable = !!options.dismissable;\n        if (options.type) {\n          $alert.$scope.type = options.type;\n        }\n\n        // Support auto-close duration\n        var show = $alert.show;\n        if (options.duration) {\n          $alert.show = function () {\n            show();\n            $timeout(function () {\n              $alert.hide();\n            }, options.duration * 1000);\n          };\n        }\n\n        return $alert;\n\n      }\n\n      return AlertFactory;\n\n    };\n\n  })\n\n  .directive('bsAlert', function ($window, $sce, $alert) {\n\n    return {\n      restrict: 'EAC',\n      scope: true,\n      link: function postLink (scope, element, attr, transclusion) {\n\n        // Directive options\n        var options = {scope: scope, element: element, show: false};\n        angular.forEach(['template', 'templateUrl', 'controller', 'controllerAs', 'placement', 'keyboard', 'html', 'container', 'animation', 'duration', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key])) options[key] = attr[key];\n        });\n\n        // use string regex match boolean attr falsy values, leave truthy values be\n        var falseValueRegExp = /^(false|0|)$/i;\n        angular.forEach(['keyboard', 'html', 'container', 'dismissable'], function (key) {\n          if (angular.isDefined(attr[key]) && falseValueRegExp.test(attr[key])) options[key] = false;\n        });\n\n        // bind functions from the attrs to the show and hide events\n        angular.forEach(['onBeforeShow', 'onShow', 'onBeforeHide', 'onHide'], function (key) {\n          var bsKey = 'bs' + key.charAt(0).toUpperCase() + key.slice(1);\n          if (angular.isDefined(attr[bsKey])) {\n            options[key] = scope.$eval(attr[bsKey]);\n          }\n        });\n\n        // overwrite inherited title value when no value specified\n        // fix for angular 1.3.1 531a8de72c439d8ddd064874bf364c00cedabb11\n        if (!scope.hasOwnProperty('title')) {\n          scope.title = '';\n        }\n\n        // Support scope as data-attrs\n        angular.forEach(['title', 'content', 'type'], function (key) {\n          if (attr[key]) {\n            attr.$observe(key, function (newValue, oldValue) {\n              scope[key] = $sce.trustAsHtml(newValue);\n            });\n          }\n        });\n\n        // Support scope as an object\n        if (attr.bsAlert) {\n          scope.$watch(attr.bsAlert, function (newValue, oldValue) {\n            if (angular.isObject(newValue)) {\n              angular.extend(scope, newValue);\n            } else {\n              scope.content = newValue;\n            }\n          }, true);\n        }\n\n        // Initialize alert\n        var alert = $alert(options);\n\n        // Trigger\n        element.on(attr.trigger || 'click', alert.toggle);\n\n        // Garbage collection\n        scope.$on('$destroy', function () {\n          if (alert) alert.destroy();\n          options = null;\n          alert = null;\n        });\n\n      }\n    };\n\n  });\n","\nangular.module('mgcrea.ngStrap', [\n  'mgcrea.ngStrap.modal',\n  'mgcrea.ngStrap.aside',\n  'mgcrea.ngStrap.alert',\n  'mgcrea.ngStrap.button',\n  'mgcrea.ngStrap.select',\n  'mgcrea.ngStrap.datepicker',\n  'mgcrea.ngStrap.timepicker',\n  'mgcrea.ngStrap.navbar',\n  'mgcrea.ngStrap.tooltip',\n  'mgcrea.ngStrap.popover',\n  'mgcrea.ngStrap.dropdown',\n  'mgcrea.ngStrap.typeahead',\n  'mgcrea.ngStrap.scrollspy',\n  'mgcrea.ngStrap.affix',\n  'mgcrea.ngStrap.tab',\n  'mgcrea.ngStrap.collapse',\n  'mgcrea.ngStrap.progressbar'\n]);\n"],"sourceRoot":"/source/"}